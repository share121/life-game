{"resolvedId":"D:/360MoveData/Users/28546/Desktop/VSCode/ts/life/node_modules/.store/element-plus@2.3.2/node_modules/element-plus/es/components/color-picker/src/composables/use-alpha-slider.mjs","transforms":[{"name":"vite:load-fallback","result":"import { getCurrentInstance, shallowRef, ref, onMounted, watch, computed } from 'vue';\nimport '../../../../utils/index.mjs';\nimport '../../../../hooks/index.mjs';\nimport { draggable } from '../utils/draggable.mjs';\nimport { getClientXY } from '../../../../utils/dom/position.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { addUnit } from '../../../../utils/dom/style.mjs';\n\nconst useAlphaSlider = (props) => {\n  const instance = getCurrentInstance();\n  const thumb = shallowRef();\n  const bar = shallowRef();\n  function handleClick(event) {\n    const target = event.target;\n    if (target !== thumb.value) {\n      handleDrag(event);\n    }\n  }\n  function handleDrag(event) {\n    if (!bar.value || !thumb.value)\n      return;\n    const el = instance.vnode.el;\n    const rect = el.getBoundingClientRect();\n    const { clientX, clientY } = getClientXY(event);\n    if (!props.vertical) {\n      let left = clientX - rect.left;\n      left = Math.max(thumb.value.offsetWidth / 2, left);\n      left = Math.min(left, rect.width - thumb.value.offsetWidth / 2);\n      props.color.set(\"alpha\", Math.round((left - thumb.value.offsetWidth / 2) / (rect.width - thumb.value.offsetWidth) * 100));\n    } else {\n      let top = clientY - rect.top;\n      top = Math.max(thumb.value.offsetHeight / 2, top);\n      top = Math.min(top, rect.height - thumb.value.offsetHeight / 2);\n      props.color.set(\"alpha\", Math.round((top - thumb.value.offsetHeight / 2) / (rect.height - thumb.value.offsetHeight) * 100));\n    }\n  }\n  return {\n    thumb,\n    bar,\n    handleDrag,\n    handleClick\n  };\n};\nconst useAlphaSliderDOM = (props, {\n  bar,\n  thumb,\n  handleDrag\n}) => {\n  const instance = getCurrentInstance();\n  const ns = useNamespace(\"color-alpha-slider\");\n  const thumbLeft = ref(0);\n  const thumbTop = ref(0);\n  const background = ref();\n  function getThumbLeft() {\n    if (!thumb.value)\n      return 0;\n    if (props.vertical)\n      return 0;\n    const el = instance.vnode.el;\n    const alpha = props.color.get(\"alpha\");\n    if (!el)\n      return 0;\n    return Math.round(alpha * (el.offsetWidth - thumb.value.offsetWidth / 2) / 100);\n  }\n  function getThumbTop() {\n    if (!thumb.value)\n      return 0;\n    const el = instance.vnode.el;\n    if (!props.vertical)\n      return 0;\n    const alpha = props.color.get(\"alpha\");\n    if (!el)\n      return 0;\n    return Math.round(alpha * (el.offsetHeight - thumb.value.offsetHeight / 2) / 100);\n  }\n  function getBackground() {\n    if (props.color && props.color.value) {\n      const { r, g, b } = props.color.toRgb();\n      return `linear-gradient(to right, rgba(${r}, ${g}, ${b}, 0) 0%, rgba(${r}, ${g}, ${b}, 1) 100%)`;\n    }\n    return \"\";\n  }\n  function update() {\n    thumbLeft.value = getThumbLeft();\n    thumbTop.value = getThumbTop();\n    background.value = getBackground();\n  }\n  onMounted(() => {\n    if (!bar.value || !thumb.value)\n      return;\n    const dragConfig = {\n      drag: (event) => {\n        handleDrag(event);\n      },\n      end: (event) => {\n        handleDrag(event);\n      }\n    };\n    draggable(bar.value, dragConfig);\n    draggable(thumb.value, dragConfig);\n    update();\n  });\n  watch(() => props.color.get(\"alpha\"), () => update());\n  watch(() => props.color.value, () => update());\n  const rootKls = computed(() => [ns.b(), ns.is(\"vertical\", props.vertical)]);\n  const barKls = computed(() => ns.e(\"bar\"));\n  const thumbKls = computed(() => ns.e(\"thumb\"));\n  const barStyle = computed(() => ({ background: background.value }));\n  const thumbStyle = computed(() => ({\n    left: addUnit(thumbLeft.value),\n    top: addUnit(thumbTop.value)\n  }));\n  return { rootKls, barKls, barStyle, thumbKls, thumbStyle, update };\n};\n\nexport { useAlphaSlider, useAlphaSliderDOM };\n//# sourceMappingURL=use-alpha-slider.mjs.map\n","start":1680878578233,"end":1680878578385}]}
