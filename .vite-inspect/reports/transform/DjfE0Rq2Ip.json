{"resolvedId":"D:/360MoveData/Users/28546/Desktop/VSCode/ts/life/node_modules/.store/element-plus@2.3.2/node_modules/element-plus/es/components/switch/src/switch2.mjs","transforms":[{"name":"vite:load-fallback","result":"import { defineComponent, getCurrentInstance, computed, ref, watch, nextTick, onMounted, openBlock, createElementBlock, normalizeClass, unref, normalizeStyle, withModifiers, createElementVNode, withKeys, createBlock, withCtx, resolveDynamicComponent, createCommentVNode, toDisplayString, createVNode } from 'vue';\nimport { isPromise } from '@vue/shared';\nimport '../../../utils/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../form/index.mjs';\nimport { Loading } from '@element-plus/icons-vue';\nimport '../../../constants/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { switchProps, switchEmits } from './switch.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useFormItem, useFormItemInputId } from '../../form/src/hooks/use-form-item.mjs';\nimport { useFormSize, useFormDisabled } from '../../form/src/hooks/use-form-common-props.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useDeprecated } from '../../../hooks/use-deprecated/index.mjs';\nimport { addUnit } from '../../../utils/dom/style.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT, INPUT_EVENT } from '../../../constants/event.mjs';\nimport { debugWarn, throwError } from '../../../utils/error.mjs';\nimport { isBoolean } from '@vueuse/core';\n\nconst _hoisted_1 = [\"onClick\"];\nconst _hoisted_2 = [\"id\", \"aria-checked\", \"aria-disabled\", \"name\", \"true-value\", \"false-value\", \"disabled\", \"tabindex\", \"onKeydown\"];\nconst _hoisted_3 = [\"aria-hidden\"];\nconst _hoisted_4 = [\"aria-hidden\"];\nconst _hoisted_5 = [\"aria-hidden\"];\nconst COMPONENT_NAME = \"ElSwitch\";\nconst __default__ = defineComponent({\n  name: COMPONENT_NAME\n});\nconst _sfc_main = /* @__PURE__ */ defineComponent({\n  ...__default__,\n  props: switchProps,\n  emits: switchEmits,\n  setup(__props, { expose, emit }) {\n    const props = __props;\n    const vm = getCurrentInstance();\n    const { formItem } = useFormItem();\n    const switchSize = useFormSize();\n    const ns = useNamespace(\"switch\");\n    useDeprecated({\n      from: '\"value\"',\n      replacement: '\"model-value\" or \"v-model\"',\n      scope: COMPONENT_NAME,\n      version: \"2.3.0\",\n      ref: \"https://element-plus.org/en-US/component/switch.html#attributes\",\n      type: \"Attribute\"\n    }, computed(() => {\n      var _a;\n      return !!((_a = vm.vnode.props) == null ? void 0 : _a.value);\n    }));\n    const { inputId } = useFormItemInputId(props, {\n      formItemContext: formItem\n    });\n    const switchDisabled = useFormDisabled(computed(() => props.loading));\n    const isControlled = ref(props.modelValue !== false);\n    const input = ref();\n    const core = ref();\n    const switchKls = computed(() => [\n      ns.b(),\n      ns.m(switchSize.value),\n      ns.is(\"disabled\", switchDisabled.value),\n      ns.is(\"checked\", checked.value)\n    ]);\n    const coreStyle = computed(() => ({\n      width: addUnit(props.width)\n    }));\n    watch(() => props.modelValue, () => {\n      isControlled.value = true;\n    });\n    watch(() => props.value, () => {\n      isControlled.value = false;\n    });\n    const actualValue = computed(() => {\n      return isControlled.value ? props.modelValue : props.value;\n    });\n    const checked = computed(() => actualValue.value === props.activeValue);\n    if (![props.activeValue, props.inactiveValue].includes(actualValue.value)) {\n      emit(UPDATE_MODEL_EVENT, props.inactiveValue);\n      emit(CHANGE_EVENT, props.inactiveValue);\n      emit(INPUT_EVENT, props.inactiveValue);\n    }\n    watch(checked, (val) => {\n      var _a;\n      input.value.checked = val;\n      if (props.validateEvent) {\n        (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"change\").catch((err) => debugWarn(err));\n      }\n    });\n    const handleChange = () => {\n      const val = checked.value ? props.inactiveValue : props.activeValue;\n      emit(UPDATE_MODEL_EVENT, val);\n      emit(CHANGE_EVENT, val);\n      emit(INPUT_EVENT, val);\n      nextTick(() => {\n        input.value.checked = checked.value;\n      });\n    };\n    const switchValue = () => {\n      if (switchDisabled.value)\n        return;\n      const { beforeChange } = props;\n      if (!beforeChange) {\n        handleChange();\n        return;\n      }\n      const shouldChange = beforeChange();\n      const isPromiseOrBool = [\n        isPromise(shouldChange),\n        isBoolean(shouldChange)\n      ].includes(true);\n      if (!isPromiseOrBool) {\n        throwError(COMPONENT_NAME, \"beforeChange must return type `Promise<boolean>` or `boolean`\");\n      }\n      if (isPromise(shouldChange)) {\n        shouldChange.then((result) => {\n          if (result) {\n            handleChange();\n          }\n        }).catch((e) => {\n          debugWarn(COMPONENT_NAME, `some error occurred: ${e}`);\n        });\n      } else if (shouldChange) {\n        handleChange();\n      }\n    };\n    const styles = computed(() => {\n      return ns.cssVarBlock({\n        ...props.activeColor ? { \"on-color\": props.activeColor } : null,\n        ...props.inactiveColor ? { \"off-color\": props.inactiveColor } : null,\n        ...props.borderColor ? { \"border-color\": props.borderColor } : null\n      });\n    });\n    const focus = () => {\n      var _a, _b;\n      (_b = (_a = input.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);\n    };\n    onMounted(() => {\n      input.value.checked = checked.value;\n    });\n    expose({\n      focus,\n      checked\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        class: normalizeClass(unref(switchKls)),\n        style: normalizeStyle(unref(styles)),\n        onClick: withModifiers(switchValue, [\"prevent\"])\n      }, [\n        createElementVNode(\"input\", {\n          id: unref(inputId),\n          ref_key: \"input\",\n          ref: input,\n          class: normalizeClass(unref(ns).e(\"input\")),\n          type: \"checkbox\",\n          role: \"switch\",\n          \"aria-checked\": unref(checked),\n          \"aria-disabled\": unref(switchDisabled),\n          name: _ctx.name,\n          \"true-value\": _ctx.activeValue,\n          \"false-value\": _ctx.inactiveValue,\n          disabled: unref(switchDisabled),\n          tabindex: _ctx.tabindex,\n          onChange: handleChange,\n          onKeydown: withKeys(switchValue, [\"enter\"])\n        }, null, 42, _hoisted_2),\n        !_ctx.inlinePrompt && (_ctx.inactiveIcon || _ctx.inactiveText) ? (openBlock(), createElementBlock(\"span\", {\n          key: 0,\n          class: normalizeClass([\n            unref(ns).e(\"label\"),\n            unref(ns).em(\"label\", \"left\"),\n            unref(ns).is(\"active\", !unref(checked))\n          ])\n        }, [\n          _ctx.inactiveIcon ? (openBlock(), createBlock(unref(ElIcon), { key: 0 }, {\n            default: withCtx(() => [\n              (openBlock(), createBlock(resolveDynamicComponent(_ctx.inactiveIcon)))\n            ]),\n            _: 1\n          })) : createCommentVNode(\"v-if\", true),\n          !_ctx.inactiveIcon && _ctx.inactiveText ? (openBlock(), createElementBlock(\"span\", {\n            key: 1,\n            \"aria-hidden\": unref(checked)\n          }, toDisplayString(_ctx.inactiveText), 9, _hoisted_3)) : createCommentVNode(\"v-if\", true)\n        ], 2)) : createCommentVNode(\"v-if\", true),\n        createElementVNode(\"span\", {\n          ref_key: \"core\",\n          ref: core,\n          class: normalizeClass(unref(ns).e(\"core\")),\n          style: normalizeStyle(unref(coreStyle))\n        }, [\n          _ctx.inlinePrompt ? (openBlock(), createElementBlock(\"div\", {\n            key: 0,\n            class: normalizeClass(unref(ns).e(\"inner\"))\n          }, [\n            _ctx.activeIcon || _ctx.inactiveIcon ? (openBlock(), createBlock(unref(ElIcon), {\n              key: 0,\n              class: normalizeClass(unref(ns).is(\"icon\"))\n            }, {\n              default: withCtx(() => [\n                (openBlock(), createBlock(resolveDynamicComponent(unref(checked) ? _ctx.activeIcon : _ctx.inactiveIcon)))\n              ]),\n              _: 1\n            }, 8, [\"class\"])) : _ctx.activeText || _ctx.inactiveText ? (openBlock(), createElementBlock(\"span\", {\n              key: 1,\n              class: normalizeClass(unref(ns).is(\"text\")),\n              \"aria-hidden\": !unref(checked)\n            }, toDisplayString(unref(checked) ? _ctx.activeText : _ctx.inactiveText), 11, _hoisted_4)) : createCommentVNode(\"v-if\", true)\n          ], 2)) : createCommentVNode(\"v-if\", true),\n          createElementVNode(\"div\", {\n            class: normalizeClass(unref(ns).e(\"action\"))\n          }, [\n            _ctx.loading ? (openBlock(), createBlock(unref(ElIcon), {\n              key: 0,\n              class: normalizeClass(unref(ns).is(\"loading\"))\n            }, {\n              default: withCtx(() => [\n                createVNode(unref(Loading))\n              ]),\n              _: 1\n            }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)\n          ], 2)\n        ], 6),\n        !_ctx.inlinePrompt && (_ctx.activeIcon || _ctx.activeText) ? (openBlock(), createElementBlock(\"span\", {\n          key: 1,\n          class: normalizeClass([\n            unref(ns).e(\"label\"),\n            unref(ns).em(\"label\", \"right\"),\n            unref(ns).is(\"active\", unref(checked))\n          ])\n        }, [\n          _ctx.activeIcon ? (openBlock(), createBlock(unref(ElIcon), { key: 0 }, {\n            default: withCtx(() => [\n              (openBlock(), createBlock(resolveDynamicComponent(_ctx.activeIcon)))\n            ]),\n            _: 1\n          })) : createCommentVNode(\"v-if\", true),\n          !_ctx.activeIcon && _ctx.activeText ? (openBlock(), createElementBlock(\"span\", {\n            key: 1,\n            \"aria-hidden\": !unref(checked)\n          }, toDisplayString(_ctx.activeText), 9, _hoisted_5)) : createCommentVNode(\"v-if\", true)\n        ], 2)) : createCommentVNode(\"v-if\", true)\n      ], 14, _hoisted_1);\n    };\n  }\n});\nvar Switch = /* @__PURE__ */ _export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/switch/src/switch.vue\"]]);\n\nexport { Switch as default };\n//# sourceMappingURL=switch2.mjs.map\n","start":1680879314071,"end":1680879314644}]}
