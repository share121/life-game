{"resolvedId":"D:/360MoveData/Users/28546/Desktop/VSCode/ts/life/node_modules/.store/element-plus@2.3.2/node_modules/element-plus/es/components/transfer/src/transfer-panel2.mjs","transforms":[{"name":"vite:load-fallback","result":"import { defineComponent, useSlots, reactive, computed, toRefs, openBlock, createElementBlock, normalizeClass, unref, createElementVNode, createVNode, isRef, withCtx, createTextVNode, toDisplayString, createBlock, createCommentVNode, withDirectives, Fragment, renderList, vShow, renderSlot } from 'vue';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { ElCheckbox, ElCheckboxGroup } from '../../checkbox/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport { Search } from '@element-plus/icons-vue';\nimport { transferPanelProps, transferPanelEmits } from './transfer-panel.mjs';\nimport './composables/index.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { usePropsAlias } from './composables/use-props-alias.mjs';\nimport { useCheck } from './composables/use-check.mjs';\nimport { isEmpty } from '../../../utils/types.mjs';\n\nconst __default__ = defineComponent({\n  name: \"ElTransferPanel\"\n});\nconst _sfc_main = /* @__PURE__ */ defineComponent({\n  ...__default__,\n  props: transferPanelProps,\n  emits: transferPanelEmits,\n  setup(__props, { expose, emit }) {\n    const props = __props;\n    const slots = useSlots();\n    const OptionContent = ({ option }) => option;\n    const { t } = useLocale();\n    const ns = useNamespace(\"transfer\");\n    const panelState = reactive({\n      checked: [],\n      allChecked: false,\n      query: \"\",\n      checkChangeByUser: true\n    });\n    const propsAlias = usePropsAlias(props);\n    const {\n      filteredData,\n      checkedSummary,\n      isIndeterminate,\n      handleAllCheckedChange\n    } = useCheck(props, panelState, emit);\n    const hasNoMatch = computed(() => !isEmpty(panelState.query) && isEmpty(filteredData.value));\n    const hasFooter = computed(() => !isEmpty(slots.default()[0].children));\n    const { checked, allChecked, query } = toRefs(panelState);\n    expose({\n      query\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        class: normalizeClass(unref(ns).b(\"panel\"))\n      }, [\n        createElementVNode(\"p\", {\n          class: normalizeClass(unref(ns).be(\"panel\", \"header\"))\n        }, [\n          createVNode(unref(ElCheckbox), {\n            modelValue: unref(allChecked),\n            \"onUpdate:modelValue\": _cache[0] || (_cache[0] = ($event) => isRef(allChecked) ? allChecked.value = $event : null),\n            indeterminate: unref(isIndeterminate),\n            \"validate-event\": false,\n            onChange: unref(handleAllCheckedChange)\n          }, {\n            default: withCtx(() => [\n              createTextVNode(toDisplayString(_ctx.title) + \" \", 1),\n              createElementVNode(\"span\", null, toDisplayString(unref(checkedSummary)), 1)\n            ]),\n            _: 1\n          }, 8, [\"modelValue\", \"indeterminate\", \"onChange\"])\n        ], 2),\n        createElementVNode(\"div\", {\n          class: normalizeClass([unref(ns).be(\"panel\", \"body\"), unref(ns).is(\"with-footer\", unref(hasFooter))])\n        }, [\n          _ctx.filterable ? (openBlock(), createBlock(unref(ElInput), {\n            key: 0,\n            modelValue: unref(query),\n            \"onUpdate:modelValue\": _cache[1] || (_cache[1] = ($event) => isRef(query) ? query.value = $event : null),\n            class: normalizeClass(unref(ns).be(\"panel\", \"filter\")),\n            size: \"default\",\n            placeholder: _ctx.placeholder,\n            \"prefix-icon\": unref(Search),\n            clearable: \"\",\n            \"validate-event\": false\n          }, null, 8, [\"modelValue\", \"class\", \"placeholder\", \"prefix-icon\"])) : createCommentVNode(\"v-if\", true),\n          withDirectives(createVNode(unref(ElCheckboxGroup), {\n            modelValue: unref(checked),\n            \"onUpdate:modelValue\": _cache[2] || (_cache[2] = ($event) => isRef(checked) ? checked.value = $event : null),\n            \"validate-event\": false,\n            class: normalizeClass([unref(ns).is(\"filterable\", _ctx.filterable), unref(ns).be(\"panel\", \"list\")])\n          }, {\n            default: withCtx(() => [\n              (openBlock(true), createElementBlock(Fragment, null, renderList(unref(filteredData), (item) => {\n                return openBlock(), createBlock(unref(ElCheckbox), {\n                  key: item[unref(propsAlias).key],\n                  class: normalizeClass(unref(ns).be(\"panel\", \"item\")),\n                  label: item[unref(propsAlias).key],\n                  disabled: item[unref(propsAlias).disabled],\n                  \"validate-event\": false\n                }, {\n                  default: withCtx(() => {\n                    var _a;\n                    return [\n                      createVNode(OptionContent, {\n                        option: (_a = _ctx.optionRender) == null ? void 0 : _a.call(_ctx, item)\n                      }, null, 8, [\"option\"])\n                    ];\n                  }),\n                  _: 2\n                }, 1032, [\"class\", \"label\", \"disabled\"]);\n              }), 128))\n            ]),\n            _: 1\n          }, 8, [\"modelValue\", \"class\"]), [\n            [vShow, !unref(hasNoMatch) && !unref(isEmpty)(_ctx.data)]\n          ]),\n          withDirectives(createElementVNode(\"p\", {\n            class: normalizeClass(unref(ns).be(\"panel\", \"empty\"))\n          }, toDisplayString(unref(hasNoMatch) ? unref(t)(\"el.transfer.noMatch\") : unref(t)(\"el.transfer.noData\")), 3), [\n            [vShow, unref(hasNoMatch) || unref(isEmpty)(_ctx.data)]\n          ])\n        ], 2),\n        unref(hasFooter) ? (openBlock(), createElementBlock(\"p\", {\n          key: 0,\n          class: normalizeClass(unref(ns).be(\"panel\", \"footer\"))\n        }, [\n          renderSlot(_ctx.$slots, \"default\")\n        ], 2)) : createCommentVNode(\"v-if\", true)\n      ], 2);\n    };\n  }\n});\nvar TransferPanel = /* @__PURE__ */ _export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/transfer/src/transfer-panel.vue\"]]);\n\nexport { TransferPanel as default };\n//# sourceMappingURL=transfer-panel2.mjs.map\n","start":1680879317861,"end":1680879318062}]}
