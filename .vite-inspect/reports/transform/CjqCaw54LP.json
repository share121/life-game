{"resolvedId":"D:/360MoveData/Users/28546/Desktop/VSCode/ts/life/node_modules/.store/element-plus@2.3.2/node_modules/element-plus/es/components/menu/src/menu-item2.mjs","transforms":[{"name":"vite:load-fallback","result":"import { defineComponent, getCurrentInstance, inject, toRef, computed, reactive, onMounted, onBeforeUnmount, resolveComponent, openBlock, createElementBlock, normalizeClass, createBlock, withCtx, renderSlot, createElementVNode, Fragment } from 'vue';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport useMenu from './use-menu.mjs';\nimport { menuItemProps, menuItemEmits } from './menu-item.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { throwError } from '../../../utils/error.mjs';\n\nconst COMPONENT_NAME = \"ElMenuItem\";\nconst _sfc_main = defineComponent({\n  name: COMPONENT_NAME,\n  components: {\n    ElTooltip\n  },\n  props: menuItemProps,\n  emits: menuItemEmits,\n  setup(props, { emit }) {\n    const instance = getCurrentInstance();\n    const rootMenu = inject(\"rootMenu\");\n    const nsMenu = useNamespace(\"menu\");\n    const nsMenuItem = useNamespace(\"menu-item\");\n    if (!rootMenu)\n      throwError(COMPONENT_NAME, \"can not inject root menu\");\n    const { parentMenu, indexPath } = useMenu(instance, toRef(props, \"index\"));\n    const subMenu = inject(`subMenu:${parentMenu.value.uid}`);\n    if (!subMenu)\n      throwError(COMPONENT_NAME, \"can not inject sub menu\");\n    const active = computed(() => props.index === rootMenu.activeIndex);\n    const item = reactive({\n      index: props.index,\n      indexPath,\n      active\n    });\n    const handleClick = () => {\n      if (!props.disabled) {\n        rootMenu.handleMenuItemClick({\n          index: props.index,\n          indexPath: indexPath.value,\n          route: props.route\n        });\n        emit(\"click\", item);\n      }\n    };\n    onMounted(() => {\n      subMenu.addSubMenu(item);\n      rootMenu.addMenuItem(item);\n    });\n    onBeforeUnmount(() => {\n      subMenu.removeSubMenu(item);\n      rootMenu.removeMenuItem(item);\n    });\n    return {\n      parentMenu,\n      rootMenu,\n      active,\n      nsMenu,\n      nsMenuItem,\n      handleClick\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_tooltip = resolveComponent(\"el-tooltip\");\n  return openBlock(), createElementBlock(\"li\", {\n    class: normalizeClass([\n      _ctx.nsMenuItem.b(),\n      _ctx.nsMenuItem.is(\"active\", _ctx.active),\n      _ctx.nsMenuItem.is(\"disabled\", _ctx.disabled)\n    ]),\n    role: \"menuitem\",\n    tabindex: \"-1\",\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))\n  }, [\n    _ctx.parentMenu.type.name === \"ElMenu\" && _ctx.rootMenu.props.collapse && _ctx.$slots.title ? (openBlock(), createBlock(_component_el_tooltip, {\n      key: 0,\n      effect: _ctx.rootMenu.props.popperEffect,\n      placement: \"right\",\n      \"fallback-placements\": [\"left\"],\n      persistent: \"\"\n    }, {\n      content: withCtx(() => [\n        renderSlot(_ctx.$slots, \"title\")\n      ]),\n      default: withCtx(() => [\n        createElementVNode(\"div\", {\n          class: normalizeClass(_ctx.nsMenu.be(\"tooltip\", \"trigger\"))\n        }, [\n          renderSlot(_ctx.$slots, \"default\")\n        ], 2)\n      ]),\n      _: 3\n    }, 8, [\"effect\"])) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [\n      renderSlot(_ctx.$slots, \"default\"),\n      renderSlot(_ctx.$slots, \"title\")\n    ], 64))\n  ], 2);\n}\nvar MenuItem = /* @__PURE__ */ _export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/menu/src/menu-item.vue\"]]);\n\nexport { MenuItem as default };\n//# sourceMappingURL=menu-item2.mjs.map\n","start":1680880653003,"end":1680880653680}]}
