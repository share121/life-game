{"resolvedId":"D:/360MoveData/Users/28546/Desktop/VSCode/ts/life/node_modules/.store/element-plus@2.3.2/node_modules/element-plus/es/components/table-v2/src/table-v2.mjs","transforms":[{"name":"vite:load-fallback","result":"import { isVNode, defineComponent, provide, unref, createVNode, mergeProps } from 'vue';\nimport '../../../hooks/index.mjs';\nimport { useTable } from './use-table.mjs';\nimport { TableV2InjectionKey } from './tokens.mjs';\nimport { tableV2Props } from './table.mjs';\nimport MainTable from './renderers/main-table.mjs';\nimport LeftTable from './renderers/left-table.mjs';\nimport LeftTable$1 from './renderers/right-table.mjs';\nimport RowRenderer from './renderers/row.mjs';\nimport CellRenderer from './renderers/cell.mjs';\nimport HeaderRenderer from './renderers/header.mjs';\nimport HeaderCellRenderer from './renderers/header-cell.mjs';\nimport Footer from './renderers/footer.mjs';\nimport Footer$1 from './renderers/empty.mjs';\nimport Overlay from './renderers/overlay.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\n\nfunction _isSlot(s) {\n  return typeof s === \"function\" || Object.prototype.toString.call(s) === \"[object Object]\" && !isVNode(s);\n}\nconst COMPONENT_NAME = \"ElTableV2\";\nconst TableV2 = defineComponent({\n  name: COMPONENT_NAME,\n  props: tableV2Props,\n  setup(props, {\n    slots,\n    expose\n  }) {\n    const ns = useNamespace(\"table-v2\");\n    const {\n      columnsStyles,\n      fixedColumnsOnLeft,\n      fixedColumnsOnRight,\n      mainColumns,\n      mainTableHeight,\n      fixedTableHeight,\n      leftTableWidth,\n      rightTableWidth,\n      data,\n      depthMap,\n      expandedRowKeys,\n      hasFixedColumns,\n      hoveringRowKey,\n      mainTableRef,\n      leftTableRef,\n      rightTableRef,\n      isDynamic,\n      isResetting,\n      isScrolling,\n      bodyWidth,\n      emptyStyle,\n      rootStyle,\n      headerWidth,\n      footerHeight,\n      showEmpty,\n      scrollTo,\n      scrollToLeft,\n      scrollToTop,\n      scrollToRow,\n      getRowHeight,\n      onColumnSorted,\n      onRowHeightChange,\n      onRowHovered,\n      onRowExpanded,\n      onRowsRendered,\n      onScroll,\n      onVerticalScroll\n    } = useTable(props);\n    expose({\n      scrollTo,\n      scrollToLeft,\n      scrollToTop,\n      scrollToRow\n    });\n    provide(TableV2InjectionKey, {\n      ns,\n      isResetting,\n      hoveringRowKey,\n      isScrolling\n    });\n    return () => {\n      const {\n        cache,\n        cellProps,\n        estimatedRowHeight,\n        expandColumnKey,\n        fixedData,\n        headerHeight,\n        headerClass,\n        headerProps,\n        headerCellProps,\n        sortBy,\n        sortState,\n        rowHeight,\n        rowClass,\n        rowEventHandlers,\n        rowKey,\n        rowProps,\n        scrollbarAlwaysOn,\n        indentSize,\n        iconSize,\n        useIsScrolling,\n        vScrollbarSize,\n        width\n      } = props;\n      const _data = unref(data);\n      const mainTableProps = {\n        cache,\n        class: ns.e(\"main\"),\n        columns: unref(mainColumns),\n        data: _data,\n        fixedData,\n        estimatedRowHeight,\n        bodyWidth: unref(bodyWidth),\n        headerHeight,\n        headerWidth: unref(headerWidth),\n        height: unref(mainTableHeight),\n        mainTableRef,\n        rowKey,\n        rowHeight,\n        scrollbarAlwaysOn,\n        scrollbarStartGap: 2,\n        scrollbarEndGap: vScrollbarSize,\n        useIsScrolling,\n        width,\n        getRowHeight,\n        onRowsRendered,\n        onScroll\n      };\n      const leftColumnsWidth = unref(leftTableWidth);\n      const _fixedTableHeight = unref(fixedTableHeight);\n      const leftTableProps = {\n        cache,\n        class: ns.e(\"left\"),\n        columns: unref(fixedColumnsOnLeft),\n        data: _data,\n        estimatedRowHeight,\n        leftTableRef,\n        rowHeight,\n        bodyWidth: leftColumnsWidth,\n        headerWidth: leftColumnsWidth,\n        headerHeight,\n        height: _fixedTableHeight,\n        rowKey,\n        scrollbarAlwaysOn,\n        scrollbarStartGap: 2,\n        scrollbarEndGap: vScrollbarSize,\n        useIsScrolling,\n        width: leftColumnsWidth,\n        getRowHeight,\n        onScroll: onVerticalScroll\n      };\n      const rightColumnsWidth = unref(rightTableWidth);\n      const rightColumnsWidthWithScrollbar = rightColumnsWidth + vScrollbarSize;\n      const rightTableProps = {\n        cache,\n        class: ns.e(\"right\"),\n        columns: unref(fixedColumnsOnRight),\n        data: _data,\n        estimatedRowHeight,\n        rightTableRef,\n        rowHeight,\n        bodyWidth: rightColumnsWidthWithScrollbar,\n        headerWidth: rightColumnsWidthWithScrollbar,\n        headerHeight,\n        height: _fixedTableHeight,\n        rowKey,\n        scrollbarAlwaysOn,\n        scrollbarStartGap: 2,\n        scrollbarEndGap: vScrollbarSize,\n        width: rightColumnsWidthWithScrollbar,\n        style: `--${unref(ns.namespace)}-table-scrollbar-size: ${vScrollbarSize}px`,\n        useIsScrolling,\n        getRowHeight,\n        onScroll: onVerticalScroll\n      };\n      const _columnsStyles = unref(columnsStyles);\n      const tableRowProps = {\n        ns,\n        depthMap: unref(depthMap),\n        columnsStyles: _columnsStyles,\n        expandColumnKey,\n        expandedRowKeys: unref(expandedRowKeys),\n        estimatedRowHeight,\n        hasFixedColumns: unref(hasFixedColumns),\n        hoveringRowKey: unref(hoveringRowKey),\n        rowProps,\n        rowClass,\n        rowKey,\n        rowEventHandlers,\n        onRowHovered,\n        onRowExpanded,\n        onRowHeightChange\n      };\n      const tableCellProps = {\n        cellProps,\n        expandColumnKey,\n        indentSize,\n        iconSize,\n        rowKey,\n        expandedRowKeys: unref(expandedRowKeys),\n        ns\n      };\n      const tableHeaderProps = {\n        ns,\n        headerClass,\n        headerProps,\n        columnsStyles: _columnsStyles\n      };\n      const tableHeaderCellProps = {\n        ns,\n        sortBy,\n        sortState,\n        headerCellProps,\n        onColumnSorted\n      };\n      const tableSlots = {\n        row: (props2) => createVNode(RowRenderer, mergeProps(props2, tableRowProps), {\n          row: slots.row,\n          cell: (props3) => {\n            let _slot;\n            return slots.cell ? createVNode(CellRenderer, mergeProps(props3, tableCellProps, {\n              \"style\": _columnsStyles[props3.column.key]\n            }), _isSlot(_slot = slots.cell(props3)) ? _slot : {\n              default: () => [_slot]\n            }) : createVNode(CellRenderer, mergeProps(props3, tableCellProps, {\n              \"style\": _columnsStyles[props3.column.key]\n            }), null);\n          }\n        }),\n        header: (props2) => createVNode(HeaderRenderer, mergeProps(props2, tableHeaderProps), {\n          header: slots.header,\n          cell: (props3) => {\n            let _slot2;\n            return slots[\"header-cell\"] ? createVNode(HeaderCellRenderer, mergeProps(props3, tableHeaderCellProps, {\n              \"style\": _columnsStyles[props3.column.key]\n            }), _isSlot(_slot2 = slots[\"header-cell\"](props3)) ? _slot2 : {\n              default: () => [_slot2]\n            }) : createVNode(HeaderCellRenderer, mergeProps(props3, tableHeaderCellProps, {\n              \"style\": _columnsStyles[props3.column.key]\n            }), null);\n          }\n        })\n      };\n      const rootKls = [props.class, ns.b(), ns.e(\"root\"), {\n        [ns.is(\"dynamic\")]: unref(isDynamic)\n      }];\n      const footerProps = {\n        class: ns.e(\"footer\"),\n        style: unref(footerHeight)\n      };\n      return createVNode(\"div\", {\n        \"class\": rootKls,\n        \"style\": unref(rootStyle)\n      }, [createVNode(MainTable, mainTableProps, _isSlot(tableSlots) ? tableSlots : {\n        default: () => [tableSlots]\n      }), createVNode(LeftTable, leftTableProps, _isSlot(tableSlots) ? tableSlots : {\n        default: () => [tableSlots]\n      }), createVNode(LeftTable$1, rightTableProps, _isSlot(tableSlots) ? tableSlots : {\n        default: () => [tableSlots]\n      }), slots.footer && createVNode(Footer, footerProps, {\n        default: slots.footer\n      }), unref(showEmpty) && createVNode(Footer$1, {\n        \"class\": ns.e(\"empty\"),\n        \"style\": unref(emptyStyle)\n      }, {\n        default: slots.empty\n      }), slots.overlay && createVNode(Overlay, {\n        \"class\": ns.e(\"overlay\")\n      }, {\n        default: slots.overlay\n      })]);\n    };\n  }\n});\n\nexport { TableV2 as default };\n//# sourceMappingURL=table-v2.mjs.map\n","start":1680878567107,"end":1680878567361}]}
