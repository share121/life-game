{"resolvedId":"D:/360MoveData/Users/28546/Desktop/VSCode/ts/life/node_modules/.store/element-plus@2.3.2/node_modules/element-plus/es/components/slider/src/slider.mjs","transforms":[{"name":"vite:load-fallback","result":"import { placements } from '@popperjs/core';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props/runtime.mjs';\nimport { useSizeProp } from '../../../hooks/use-size/index.mjs';\nimport { isNumber } from '@vueuse/core';\nimport { isArray } from '@vue/shared';\nimport { UPDATE_MODEL_EVENT, INPUT_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\n\nconst sliderProps = buildProps({\n  modelValue: {\n    type: definePropType([Number, Array]),\n    default: 0\n  },\n  id: {\n    type: String,\n    default: void 0\n  },\n  min: {\n    type: Number,\n    default: 0\n  },\n  max: {\n    type: Number,\n    default: 100\n  },\n  step: {\n    type: Number,\n    default: 1\n  },\n  showInput: Boolean,\n  showInputControls: {\n    type: Boolean,\n    default: true\n  },\n  size: useSizeProp,\n  inputSize: useSizeProp,\n  showStops: Boolean,\n  showTooltip: {\n    type: Boolean,\n    default: true\n  },\n  formatTooltip: {\n    type: definePropType(Function),\n    default: void 0\n  },\n  disabled: Boolean,\n  range: Boolean,\n  vertical: Boolean,\n  height: String,\n  debounce: {\n    type: Number,\n    default: 300\n  },\n  label: {\n    type: String,\n    default: void 0\n  },\n  rangeStartLabel: {\n    type: String,\n    default: void 0\n  },\n  rangeEndLabel: {\n    type: String,\n    default: void 0\n  },\n  formatValueText: {\n    type: definePropType(Function),\n    default: void 0\n  },\n  tooltipClass: {\n    type: String,\n    default: void 0\n  },\n  placement: {\n    type: String,\n    values: placements,\n    default: \"top\"\n  },\n  marks: {\n    type: definePropType(Object)\n  },\n  validateEvent: {\n    type: Boolean,\n    default: true\n  }\n});\nconst isValidValue = (value) => isNumber(value) || isArray(value) && value.every(isNumber);\nconst sliderEmits = {\n  [UPDATE_MODEL_EVENT]: isValidValue,\n  [INPUT_EVENT]: isValidValue,\n  [CHANGE_EVENT]: isValidValue\n};\n\nexport { sliderEmits, sliderProps };\n//# sourceMappingURL=slider.mjs.map\n","start":1680878566926,"end":1680878567154}]}
