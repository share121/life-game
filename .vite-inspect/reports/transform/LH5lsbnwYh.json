{"resolvedId":"D:/360MoveData/Users/28546/Desktop/VSCode/ts/life/node_modules/.store/element-plus@2.3.2/node_modules/element-plus/es/components/upload/src/upload-content2.mjs","transforms":[{"name":"vite:load-fallback","result":"import { defineComponent, shallowRef, openBlock, createElementBlock, normalizeClass, unref, withKeys, withModifiers, createBlock, withCtx, renderSlot, createElementVNode } from 'vue';\nimport { isObject } from '@vue/shared';\nimport { cloneDeep } from 'lodash-unified';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../form/index.mjs';\nimport UploadDragger from './upload-dragger2.mjs';\nimport { uploadContentProps } from './upload-content.mjs';\nimport { genFileId } from './upload.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useFormDisabled } from '../../form/src/hooks/use-form-common-props.mjs';\nimport { entriesOf } from '../../../utils/objects.mjs';\n\nconst _hoisted_1 = [\"onKeydown\"];\nconst _hoisted_2 = [\"name\", \"multiple\", \"accept\"];\nconst __default__ = defineComponent({\n  name: \"ElUploadContent\",\n  inheritAttrs: false\n});\nconst _sfc_main = /* @__PURE__ */ defineComponent({\n  ...__default__,\n  props: uploadContentProps,\n  setup(__props, { expose }) {\n    const props = __props;\n    const ns = useNamespace(\"upload\");\n    const disabled = useFormDisabled();\n    const requests = shallowRef({});\n    const inputRef = shallowRef();\n    const uploadFiles = (files) => {\n      if (files.length === 0)\n        return;\n      const { autoUpload, limit, fileList, multiple, onStart, onExceed } = props;\n      if (limit && fileList.length + files.length > limit) {\n        onExceed(files, fileList);\n        return;\n      }\n      if (!multiple) {\n        files = files.slice(0, 1);\n      }\n      for (const file of files) {\n        const rawFile = file;\n        rawFile.uid = genFileId();\n        onStart(rawFile);\n        if (autoUpload)\n          upload(rawFile);\n      }\n    };\n    const upload = async (rawFile) => {\n      inputRef.value.value = \"\";\n      if (!props.beforeUpload) {\n        return doUpload(rawFile);\n      }\n      let hookResult;\n      let beforeData = {};\n      try {\n        const beforeUploadPromise = props.beforeUpload(rawFile);\n        beforeData = isObject(props.data) ? cloneDeep(props.data) : props.data;\n        hookResult = await beforeUploadPromise;\n      } catch (e) {\n        hookResult = false;\n      }\n      if (hookResult === false) {\n        props.onRemove(rawFile);\n        return;\n      }\n      let file = rawFile;\n      if (hookResult instanceof Blob) {\n        if (hookResult instanceof File) {\n          file = hookResult;\n        } else {\n          file = new File([hookResult], rawFile.name, {\n            type: rawFile.type\n          });\n        }\n      }\n      doUpload(Object.assign(file, {\n        uid: rawFile.uid\n      }), beforeData);\n    };\n    const doUpload = (rawFile, beforeData) => {\n      const {\n        headers,\n        data,\n        method,\n        withCredentials,\n        name: filename,\n        action,\n        onProgress,\n        onSuccess,\n        onError,\n        httpRequest\n      } = props;\n      const { uid } = rawFile;\n      const options = {\n        headers: headers || {},\n        withCredentials,\n        file: rawFile,\n        data: beforeData != null ? beforeData : data,\n        method,\n        filename,\n        action,\n        onProgress: (evt) => {\n          onProgress(evt, rawFile);\n        },\n        onSuccess: (res) => {\n          onSuccess(res, rawFile);\n          delete requests.value[uid];\n        },\n        onError: (err) => {\n          onError(err, rawFile);\n          delete requests.value[uid];\n        }\n      };\n      const request = httpRequest(options);\n      requests.value[uid] = request;\n      if (request instanceof Promise) {\n        request.then(options.onSuccess, options.onError);\n      }\n    };\n    const handleChange = (e) => {\n      const files = e.target.files;\n      if (!files)\n        return;\n      uploadFiles(Array.from(files));\n    };\n    const handleClick = () => {\n      if (!disabled.value) {\n        inputRef.value.value = \"\";\n        inputRef.value.click();\n      }\n    };\n    const handleKeydown = () => {\n      handleClick();\n    };\n    const abort = (file) => {\n      const _reqs = entriesOf(requests.value).filter(file ? ([uid]) => String(file.uid) === uid : () => true);\n      _reqs.forEach(([uid, req]) => {\n        if (req instanceof XMLHttpRequest)\n          req.abort();\n        delete requests.value[uid];\n      });\n    };\n    expose({\n      abort,\n      upload\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        class: normalizeClass([unref(ns).b(), unref(ns).m(_ctx.listType), unref(ns).is(\"drag\", _ctx.drag)]),\n        tabindex: \"0\",\n        onClick: handleClick,\n        onKeydown: withKeys(withModifiers(handleKeydown, [\"self\"]), [\"enter\", \"space\"])\n      }, [\n        _ctx.drag ? (openBlock(), createBlock(UploadDragger, {\n          key: 0,\n          disabled: unref(disabled),\n          onFile: uploadFiles\n        }, {\n          default: withCtx(() => [\n            renderSlot(_ctx.$slots, \"default\")\n          ]),\n          _: 3\n        }, 8, [\"disabled\"])) : renderSlot(_ctx.$slots, \"default\", { key: 1 }),\n        createElementVNode(\"input\", {\n          ref_key: \"inputRef\",\n          ref: inputRef,\n          class: normalizeClass(unref(ns).e(\"input\")),\n          name: _ctx.name,\n          multiple: _ctx.multiple,\n          accept: _ctx.accept,\n          type: \"file\",\n          onChange: handleChange,\n          onClick: _cache[0] || (_cache[0] = withModifiers(() => {\n          }, [\"stop\"]))\n        }, null, 42, _hoisted_2)\n      ], 42, _hoisted_1);\n    };\n  }\n});\nvar UploadContent = /* @__PURE__ */ _export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/upload/src/upload-content.vue\"]]);\n\nexport { UploadContent as default };\n//# sourceMappingURL=upload-content2.mjs.map\n","start":1680878576101,"end":1680878576374}]}
