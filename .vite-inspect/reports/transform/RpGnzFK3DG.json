{"resolvedId":"D:/360MoveData/Users/28546/Desktop/VSCode/ts/life/node_modules/.store/element-plus@2.3.2/node_modules/element-plus/es/components/loading/src/loading.mjs","transforms":[{"name":"vite:load-fallback","result":"import { ref, reactive, defineComponent, h, Transition, withCtx, withDirectives, createVNode, vShow, createApp, toRefs } from 'vue';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../config-provider/index.mjs';\nimport { removeClass } from '../../../utils/dom/style.mjs';\nimport { useGlobalComponentSettings } from '../../config-provider/src/hooks/use-global-config.mjs';\nimport { useZIndex } from '../../../hooks/use-z-index/index.mjs';\n\nfunction createLoadingComponent(options) {\n  let afterLeaveTimer;\n  const afterLeaveFlag = ref(false);\n  const data = reactive({\n    ...options,\n    originalPosition: \"\",\n    originalOverflow: \"\",\n    visible: false\n  });\n  function setText(text) {\n    data.text = text;\n  }\n  function destroySelf() {\n    const target = data.parent;\n    const ns = vm.ns;\n    if (!target.vLoadingAddClassList) {\n      let loadingNumber = target.getAttribute(\"loading-number\");\n      loadingNumber = Number.parseInt(loadingNumber) - 1;\n      if (!loadingNumber) {\n        removeClass(target, ns.bm(\"parent\", \"relative\"));\n        target.removeAttribute(\"loading-number\");\n      } else {\n        target.setAttribute(\"loading-number\", loadingNumber.toString());\n      }\n      removeClass(target, ns.bm(\"parent\", \"hidden\"));\n    }\n    removeElLoadingChild();\n    loadingInstance.unmount();\n  }\n  function removeElLoadingChild() {\n    var _a, _b;\n    (_b = (_a = vm.$el) == null ? void 0 : _a.parentNode) == null ? void 0 : _b.removeChild(vm.$el);\n  }\n  function close() {\n    var _a;\n    if (options.beforeClose && !options.beforeClose())\n      return;\n    afterLeaveFlag.value = true;\n    clearTimeout(afterLeaveTimer);\n    afterLeaveTimer = window.setTimeout(handleAfterLeave, 400);\n    data.visible = false;\n    (_a = options.closed) == null ? void 0 : _a.call(options);\n  }\n  function handleAfterLeave() {\n    if (!afterLeaveFlag.value)\n      return;\n    const target = data.parent;\n    afterLeaveFlag.value = false;\n    target.vLoadingAddClassList = void 0;\n    destroySelf();\n  }\n  const elLoadingComponent = defineComponent({\n    name: \"ElLoading\",\n    setup(_, { expose }) {\n      const { ns } = useGlobalComponentSettings(\"loading\");\n      const zIndex = useZIndex();\n      expose({\n        ns,\n        zIndex\n      });\n      return () => {\n        const svg = data.spinner || data.svg;\n        const spinner = h(\"svg\", {\n          class: \"circular\",\n          viewBox: data.svgViewBox ? data.svgViewBox : \"0 0 50 50\",\n          ...svg ? { innerHTML: svg } : {}\n        }, [\n          h(\"circle\", {\n            class: \"path\",\n            cx: \"25\",\n            cy: \"25\",\n            r: \"20\",\n            fill: \"none\"\n          })\n        ]);\n        const spinnerText = data.text ? h(\"p\", { class: ns.b(\"text\") }, [data.text]) : void 0;\n        return h(Transition, {\n          name: ns.b(\"fade\"),\n          onAfterLeave: handleAfterLeave\n        }, {\n          default: withCtx(() => [\n            withDirectives(createVNode(\"div\", {\n              style: {\n                backgroundColor: data.background || \"\"\n              },\n              class: [\n                ns.b(\"mask\"),\n                data.customClass,\n                data.fullscreen ? \"is-fullscreen\" : \"\"\n              ]\n            }, [\n              h(\"div\", {\n                class: ns.b(\"spinner\")\n              }, [spinner, spinnerText])\n            ]), [[vShow, data.visible]])\n          ])\n        });\n      };\n    }\n  });\n  const loadingInstance = createApp(elLoadingComponent);\n  const vm = loadingInstance.mount(document.createElement(\"div\"));\n  return {\n    ...toRefs(data),\n    setText,\n    removeElLoadingChild,\n    close,\n    handleAfterLeave,\n    vm,\n    get $el() {\n      return vm.$el;\n    }\n  };\n}\n\nexport { createLoadingComponent };\n//# sourceMappingURL=loading.mjs.map\n","start":1680879315109,"end":1680879315642}]}
