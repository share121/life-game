{"resolvedId":"D:/360MoveData/Users/28546/Desktop/VSCode/ts/life/node_modules/.store/element-plus@2.3.2/node_modules/element-plus/es/components/calendar/src/use-date-table.mjs","transforms":[{"name":"vite:load-fallback","result":"import { computed } from 'vue';\nimport dayjs from 'dayjs';\nimport localeData from 'dayjs/plugin/localeData.js';\nimport '../../../hooks/index.mjs';\nimport '../../time-picker/index.mjs';\nimport '../../../constants/index.mjs';\nimport { getPrevMonthLastDays, getMonthDays, toNestedArr } from './date-table.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { rangeArr } from '../../time-picker/src/utils.mjs';\nimport { WEEK_DAYS } from '../../../constants/date.mjs';\n\nconst useDateTable = (props, emit) => {\n  dayjs.extend(localeData);\n  const firstDayOfWeek = dayjs.localeData().firstDayOfWeek();\n  const { t, lang } = useLocale();\n  const now = dayjs().locale(lang.value);\n  const isInRange = computed(() => !!props.range && !!props.range.length);\n  const rows = computed(() => {\n    let days = [];\n    if (isInRange.value) {\n      const [start, end] = props.range;\n      const currentMonthRange = rangeArr(end.date() - start.date() + 1).map((index) => ({\n        text: start.date() + index,\n        type: \"current\"\n      }));\n      let remaining = currentMonthRange.length % 7;\n      remaining = remaining === 0 ? 0 : 7 - remaining;\n      const nextMonthRange = rangeArr(remaining).map((_, index) => ({\n        text: index + 1,\n        type: \"next\"\n      }));\n      days = currentMonthRange.concat(nextMonthRange);\n    } else {\n      const firstDay = props.date.startOf(\"month\").day();\n      const prevMonthDays = getPrevMonthLastDays(props.date, (firstDay - firstDayOfWeek + 7) % 7).map((day) => ({\n        text: day,\n        type: \"prev\"\n      }));\n      const currentMonthDays = getMonthDays(props.date).map((day) => ({\n        text: day,\n        type: \"current\"\n      }));\n      days = [...prevMonthDays, ...currentMonthDays];\n      const remaining = 7 - (days.length % 7 || 7);\n      const nextMonthDays = rangeArr(remaining).map((_, index) => ({\n        text: index + 1,\n        type: \"next\"\n      }));\n      days = days.concat(nextMonthDays);\n    }\n    return toNestedArr(days);\n  });\n  const weekDays = computed(() => {\n    const start = firstDayOfWeek;\n    if (start === 0) {\n      return WEEK_DAYS.map((_) => t(`el.datepicker.weeks.${_}`));\n    } else {\n      return WEEK_DAYS.slice(start).concat(WEEK_DAYS.slice(0, start)).map((_) => t(`el.datepicker.weeks.${_}`));\n    }\n  });\n  const getFormattedDate = (day, type) => {\n    switch (type) {\n      case \"prev\":\n        return props.date.startOf(\"month\").subtract(1, \"month\").date(day);\n      case \"next\":\n        return props.date.startOf(\"month\").add(1, \"month\").date(day);\n      case \"current\":\n        return props.date.date(day);\n    }\n  };\n  const handlePickDay = ({ text, type }) => {\n    const date = getFormattedDate(text, type);\n    emit(\"pick\", date);\n  };\n  const getSlotData = ({ text, type }) => {\n    const day = getFormattedDate(text, type);\n    return {\n      isSelected: day.isSame(props.selectedDay),\n      type: `${type}-month`,\n      day: day.format(\"YYYY-MM-DD\"),\n      date: day.toDate()\n    };\n  };\n  return {\n    now,\n    isInRange,\n    rows,\n    weekDays,\n    getFormattedDate,\n    handlePickDay,\n    getSlotData\n  };\n};\n\nexport { useDateTable };\n//# sourceMappingURL=use-date-table.mjs.map\n","start":1680878576675,"end":1680878576834}]}
