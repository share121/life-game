{"resolvedId":"D:/360MoveData/Users/28546/Desktop/VSCode/ts/life/node_modules/.store/element-plus@2.3.2/node_modules/element-plus/es/components/form/src/form-item2.mjs","transforms":[{"name":"vite:load-fallback","result":"import { defineComponent, useSlots, inject, ref, computed, nextTick, watch, reactive, toRefs, provide, onMounted, onBeforeUnmount, openBlock, createElementBlock, normalizeClass, unref, createVNode, withCtx, createBlock, resolveDynamicComponent, normalizeStyle, renderSlot, createTextVNode, toDisplayString, createCommentVNode, createElementVNode, TransitionGroup } from 'vue';\nimport AsyncValidator from 'async-validator';\nimport { castArray, clone } from 'lodash-unified';\nimport { refDebounced, isBoolean } from '@vueuse/core';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport './hooks/index.mjs';\nimport { formItemProps } from './form-item.mjs';\nimport FormLabelWrap from './form-label-wrap.mjs';\nimport { formContextKey, formItemContextKey } from './constants.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useFormSize } from './hooks/use-form-common-props.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useId } from '../../../hooks/use-id/index.mjs';\nimport { addUnit } from '../../../utils/dom/style.mjs';\nimport { isString, isFunction } from '@vue/shared';\nimport { getProp } from '../../../utils/objects.mjs';\n\nconst _hoisted_1 = [\"role\", \"aria-labelledby\"];\nconst __default__ = defineComponent({\n  name: \"ElFormItem\"\n});\nconst _sfc_main = /* @__PURE__ */ defineComponent({\n  ...__default__,\n  props: formItemProps,\n  setup(__props, { expose }) {\n    const props = __props;\n    const slots = useSlots();\n    const formContext = inject(formContextKey, void 0);\n    const parentFormItemContext = inject(formItemContextKey, void 0);\n    const _size = useFormSize(void 0, { formItem: false });\n    const ns = useNamespace(\"form-item\");\n    const labelId = useId().value;\n    const inputIds = ref([]);\n    const validateState = ref(\"\");\n    const validateStateDebounced = refDebounced(validateState, 100);\n    const validateMessage = ref(\"\");\n    const formItemRef = ref();\n    let initialValue = void 0;\n    let isResettingField = false;\n    const labelStyle = computed(() => {\n      if ((formContext == null ? void 0 : formContext.labelPosition) === \"top\") {\n        return {};\n      }\n      const labelWidth = addUnit(props.labelWidth || (formContext == null ? void 0 : formContext.labelWidth) || \"\");\n      if (labelWidth)\n        return { width: labelWidth };\n      return {};\n    });\n    const contentStyle = computed(() => {\n      if ((formContext == null ? void 0 : formContext.labelPosition) === \"top\" || (formContext == null ? void 0 : formContext.inline)) {\n        return {};\n      }\n      if (!props.label && !props.labelWidth && isNested) {\n        return {};\n      }\n      const labelWidth = addUnit(props.labelWidth || (formContext == null ? void 0 : formContext.labelWidth) || \"\");\n      if (!props.label && !slots.label) {\n        return { marginLeft: labelWidth };\n      }\n      return {};\n    });\n    const formItemClasses = computed(() => [\n      ns.b(),\n      ns.m(_size.value),\n      ns.is(\"error\", validateState.value === \"error\"),\n      ns.is(\"validating\", validateState.value === \"validating\"),\n      ns.is(\"success\", validateState.value === \"success\"),\n      ns.is(\"required\", isRequired.value || props.required),\n      ns.is(\"no-asterisk\", formContext == null ? void 0 : formContext.hideRequiredAsterisk),\n      (formContext == null ? void 0 : formContext.requireAsteriskPosition) === \"right\" ? \"asterisk-right\" : \"asterisk-left\",\n      { [ns.m(\"feedback\")]: formContext == null ? void 0 : formContext.statusIcon }\n    ]);\n    const _inlineMessage = computed(() => isBoolean(props.inlineMessage) ? props.inlineMessage : (formContext == null ? void 0 : formContext.inlineMessage) || false);\n    const validateClasses = computed(() => [\n      ns.e(\"error\"),\n      { [ns.em(\"error\", \"inline\")]: _inlineMessage.value }\n    ]);\n    const propString = computed(() => {\n      if (!props.prop)\n        return \"\";\n      return isString(props.prop) ? props.prop : props.prop.join(\".\");\n    });\n    const hasLabel = computed(() => {\n      return !!(props.label || slots.label);\n    });\n    const labelFor = computed(() => {\n      return props.for || inputIds.value.length === 1 ? inputIds.value[0] : void 0;\n    });\n    const isGroup = computed(() => {\n      return !labelFor.value && hasLabel.value;\n    });\n    const isNested = !!parentFormItemContext;\n    const fieldValue = computed(() => {\n      const model = formContext == null ? void 0 : formContext.model;\n      if (!model || !props.prop) {\n        return;\n      }\n      return getProp(model, props.prop).value;\n    });\n    const normalizedRules = computed(() => {\n      const { required } = props;\n      const rules = [];\n      if (props.rules) {\n        rules.push(...castArray(props.rules));\n      }\n      const formRules = formContext == null ? void 0 : formContext.rules;\n      if (formRules && props.prop) {\n        const _rules = getProp(formRules, props.prop).value;\n        if (_rules) {\n          rules.push(...castArray(_rules));\n        }\n      }\n      if (required !== void 0) {\n        const requiredRules = rules.map((rule, i) => [rule, i]).filter(([rule]) => Object.keys(rule).includes(\"required\"));\n        if (requiredRules.length > 0) {\n          for (const [rule, i] of requiredRules) {\n            if (rule.required === required)\n              continue;\n            rules[i] = { ...rule, required };\n          }\n        } else {\n          rules.push({ required });\n        }\n      }\n      return rules;\n    });\n    const validateEnabled = computed(() => normalizedRules.value.length > 0);\n    const getFilteredRule = (trigger) => {\n      const rules = normalizedRules.value;\n      return rules.filter((rule) => {\n        if (!rule.trigger || !trigger)\n          return true;\n        if (Array.isArray(rule.trigger)) {\n          return rule.trigger.includes(trigger);\n        } else {\n          return rule.trigger === trigger;\n        }\n      }).map(({ trigger: trigger2, ...rule }) => rule);\n    };\n    const isRequired = computed(() => normalizedRules.value.some((rule) => rule.required));\n    const shouldShowError = computed(() => {\n      var _a;\n      return validateStateDebounced.value === \"error\" && props.showMessage && ((_a = formContext == null ? void 0 : formContext.showMessage) != null ? _a : true);\n    });\n    const currentLabel = computed(() => `${props.label || \"\"}${(formContext == null ? void 0 : formContext.labelSuffix) || \"\"}`);\n    const setValidationState = (state) => {\n      validateState.value = state;\n    };\n    const onValidationFailed = (error) => {\n      var _a, _b;\n      const { errors, fields } = error;\n      if (!errors || !fields) {\n        console.error(error);\n      }\n      setValidationState(\"error\");\n      validateMessage.value = errors ? (_b = (_a = errors == null ? void 0 : errors[0]) == null ? void 0 : _a.message) != null ? _b : `${props.prop} is required` : \"\";\n      formContext == null ? void 0 : formContext.emit(\"validate\", props.prop, false, validateMessage.value);\n    };\n    const onValidationSucceeded = () => {\n      setValidationState(\"success\");\n      formContext == null ? void 0 : formContext.emit(\"validate\", props.prop, true, \"\");\n    };\n    const doValidate = async (rules) => {\n      const modelName = propString.value;\n      const validator = new AsyncValidator({\n        [modelName]: rules\n      });\n      return validator.validate({ [modelName]: fieldValue.value }, { firstFields: true }).then(() => {\n        onValidationSucceeded();\n        return true;\n      }).catch((err) => {\n        onValidationFailed(err);\n        return Promise.reject(err);\n      });\n    };\n    const validate = async (trigger, callback) => {\n      if (isResettingField || !props.prop) {\n        return false;\n      }\n      const hasCallback = isFunction(callback);\n      if (!validateEnabled.value) {\n        callback == null ? void 0 : callback(false);\n        return false;\n      }\n      const rules = getFilteredRule(trigger);\n      if (rules.length === 0) {\n        callback == null ? void 0 : callback(true);\n        return true;\n      }\n      setValidationState(\"validating\");\n      return doValidate(rules).then(() => {\n        callback == null ? void 0 : callback(true);\n        return true;\n      }).catch((err) => {\n        const { fields } = err;\n        callback == null ? void 0 : callback(false, fields);\n        return hasCallback ? false : Promise.reject(fields);\n      });\n    };\n    const clearValidate = () => {\n      setValidationState(\"\");\n      validateMessage.value = \"\";\n      isResettingField = false;\n    };\n    const resetField = async () => {\n      const model = formContext == null ? void 0 : formContext.model;\n      if (!model || !props.prop)\n        return;\n      const computedValue = getProp(model, props.prop);\n      isResettingField = true;\n      computedValue.value = clone(initialValue);\n      await nextTick();\n      clearValidate();\n      isResettingField = false;\n    };\n    const addInputId = (id) => {\n      if (!inputIds.value.includes(id)) {\n        inputIds.value.push(id);\n      }\n    };\n    const removeInputId = (id) => {\n      inputIds.value = inputIds.value.filter((listId) => listId !== id);\n    };\n    watch(() => props.error, (val) => {\n      validateMessage.value = val || \"\";\n      setValidationState(val ? \"error\" : \"\");\n    }, { immediate: true });\n    watch(() => props.validateStatus, (val) => setValidationState(val || \"\"));\n    const context = reactive({\n      ...toRefs(props),\n      $el: formItemRef,\n      size: _size,\n      validateState,\n      labelId,\n      inputIds,\n      isGroup,\n      hasLabel,\n      addInputId,\n      removeInputId,\n      resetField,\n      clearValidate,\n      validate\n    });\n    provide(formItemContextKey, context);\n    onMounted(() => {\n      if (props.prop) {\n        formContext == null ? void 0 : formContext.addField(context);\n        initialValue = clone(fieldValue.value);\n      }\n    });\n    onBeforeUnmount(() => {\n      formContext == null ? void 0 : formContext.removeField(context);\n    });\n    expose({\n      size: _size,\n      validateMessage,\n      validateState,\n      validate,\n      clearValidate,\n      resetField\n    });\n    return (_ctx, _cache) => {\n      var _a;\n      return openBlock(), createElementBlock(\"div\", {\n        ref_key: \"formItemRef\",\n        ref: formItemRef,\n        class: normalizeClass(unref(formItemClasses)),\n        role: unref(isGroup) ? \"group\" : void 0,\n        \"aria-labelledby\": unref(isGroup) ? unref(labelId) : void 0\n      }, [\n        createVNode(unref(FormLabelWrap), {\n          \"is-auto-width\": unref(labelStyle).width === \"auto\",\n          \"update-all\": ((_a = unref(formContext)) == null ? void 0 : _a.labelWidth) === \"auto\"\n        }, {\n          default: withCtx(() => [\n            unref(hasLabel) ? (openBlock(), createBlock(resolveDynamicComponent(unref(labelFor) ? \"label\" : \"div\"), {\n              key: 0,\n              id: unref(labelId),\n              for: unref(labelFor),\n              class: normalizeClass(unref(ns).e(\"label\")),\n              style: normalizeStyle(unref(labelStyle))\n            }, {\n              default: withCtx(() => [\n                renderSlot(_ctx.$slots, \"label\", { label: unref(currentLabel) }, () => [\n                  createTextVNode(toDisplayString(unref(currentLabel)), 1)\n                ])\n              ]),\n              _: 3\n            }, 8, [\"id\", \"for\", \"class\", \"style\"])) : createCommentVNode(\"v-if\", true)\n          ]),\n          _: 3\n        }, 8, [\"is-auto-width\", \"update-all\"]),\n        createElementVNode(\"div\", {\n          class: normalizeClass(unref(ns).e(\"content\")),\n          style: normalizeStyle(unref(contentStyle))\n        }, [\n          renderSlot(_ctx.$slots, \"default\"),\n          createVNode(TransitionGroup, {\n            name: `${unref(ns).namespace.value}-zoom-in-top`\n          }, {\n            default: withCtx(() => [\n              unref(shouldShowError) ? renderSlot(_ctx.$slots, \"error\", {\n                key: 0,\n                error: validateMessage.value\n              }, () => [\n                createElementVNode(\"div\", {\n                  class: normalizeClass(unref(validateClasses))\n                }, toDisplayString(validateMessage.value), 3)\n              ]) : createCommentVNode(\"v-if\", true)\n            ]),\n            _: 3\n          }, 8, [\"name\"])\n        ], 6)\n      ], 10, _hoisted_1);\n    };\n  }\n});\nvar FormItem = /* @__PURE__ */ _export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/form/src/form-item.vue\"]]);\n\nexport { FormItem as default };\n//# sourceMappingURL=form-item2.mjs.map\n","start":1680879312417,"end":1680879313502}]}
