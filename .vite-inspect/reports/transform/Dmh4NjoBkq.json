{"resolvedId":"D:/360MoveData/Users/28546/Desktop/VSCode/ts/life/node_modules/.store/element-plus@2.3.2/node_modules/element-plus/es/components/button/src/button2.mjs","transforms":[{"name":"vite:load-fallback","result":"import { defineComponent, openBlock, createElementBlock, normalizeClass, unref, normalizeStyle, Fragment, renderSlot, createBlock, withCtx, resolveDynamicComponent, createCommentVNode } from 'vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { useButton } from './use-button.mjs';\nimport { buttonProps, buttonEmits } from './button.mjs';\nimport { useButtonCustomStyle } from './button-custom.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\n\nconst _hoisted_1 = [\"aria-disabled\", \"disabled\", \"autofocus\", \"type\"];\nconst __default__ = defineComponent({\n  name: \"ElButton\"\n});\nconst _sfc_main = /* @__PURE__ */ defineComponent({\n  ...__default__,\n  props: buttonProps,\n  emits: buttonEmits,\n  setup(__props, { expose, emit }) {\n    const props = __props;\n    const buttonStyle = useButtonCustomStyle(props);\n    const ns = useNamespace(\"button\");\n    const { _ref, _size, _type, _disabled, shouldAddSpace, handleClick } = useButton(props, emit);\n    expose({\n      ref: _ref,\n      size: _size,\n      type: _type,\n      disabled: _disabled,\n      shouldAddSpace\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"button\", {\n        ref_key: \"_ref\",\n        ref: _ref,\n        class: normalizeClass([\n          unref(ns).b(),\n          unref(ns).m(unref(_type)),\n          unref(ns).m(unref(_size)),\n          unref(ns).is(\"disabled\", unref(_disabled)),\n          unref(ns).is(\"loading\", _ctx.loading),\n          unref(ns).is(\"plain\", _ctx.plain),\n          unref(ns).is(\"round\", _ctx.round),\n          unref(ns).is(\"circle\", _ctx.circle),\n          unref(ns).is(\"text\", _ctx.text),\n          unref(ns).is(\"link\", _ctx.link),\n          unref(ns).is(\"has-bg\", _ctx.bg)\n        ]),\n        \"aria-disabled\": unref(_disabled) || _ctx.loading,\n        disabled: unref(_disabled) || _ctx.loading,\n        autofocus: _ctx.autofocus,\n        type: _ctx.nativeType,\n        style: normalizeStyle(unref(buttonStyle)),\n        onClick: _cache[0] || (_cache[0] = (...args) => unref(handleClick) && unref(handleClick)(...args))\n      }, [\n        _ctx.loading ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [\n          _ctx.$slots.loading ? renderSlot(_ctx.$slots, \"loading\", { key: 0 }) : (openBlock(), createBlock(unref(ElIcon), {\n            key: 1,\n            class: normalizeClass(unref(ns).is(\"loading\"))\n          }, {\n            default: withCtx(() => [\n              (openBlock(), createBlock(resolveDynamicComponent(_ctx.loadingIcon)))\n            ]),\n            _: 1\n          }, 8, [\"class\"]))\n        ], 64)) : _ctx.icon || _ctx.$slots.icon ? (openBlock(), createBlock(unref(ElIcon), { key: 1 }, {\n          default: withCtx(() => [\n            _ctx.icon ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.icon), { key: 0 })) : renderSlot(_ctx.$slots, \"icon\", { key: 1 })\n          ]),\n          _: 3\n        })) : createCommentVNode(\"v-if\", true),\n        _ctx.$slots.default ? (openBlock(), createElementBlock(\"span\", {\n          key: 2,\n          class: normalizeClass({ [unref(ns).em(\"text\", \"expand\")]: unref(shouldAddSpace) })\n        }, [\n          renderSlot(_ctx.$slots, \"default\")\n        ], 2)) : createCommentVNode(\"v-if\", true)\n      ], 14, _hoisted_1);\n    };\n  }\n});\nvar Button = /* @__PURE__ */ _export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/button/src/button.vue\"]]);\n\nexport { Button as default };\n//# sourceMappingURL=button2.mjs.map\n","start":1680879311172,"end":1680879311705}]}
