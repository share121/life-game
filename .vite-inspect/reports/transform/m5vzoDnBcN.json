{"resolvedId":"D:/360MoveData/Users/28546/Desktop/VSCode/ts/life/node_modules/.store/element-plus@2.3.2/node_modules/element-plus/es/components/date-picker/src/date-picker-com/basic-date-table.mjs","transforms":[{"name":"vite:load-fallback","result":"import { defineComponent, ref, computed, unref, watch, nextTick, openBlock, createElementBlock, normalizeClass, withModifiers, createElementVNode, toDisplayString, createCommentVNode, Fragment, renderList, createVNode } from 'vue';\nimport dayjs from 'dayjs';\nimport { flatten } from 'lodash-unified';\nimport '../../../../hooks/index.mjs';\nimport '../../../../utils/index.mjs';\nimport { basicDateTableProps } from '../props/basic-date-table.mjs';\nimport { buildPickerTable } from '../utils.mjs';\nimport ElDatePickerCell from './basic-cell-render.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../../hooks/use-locale/index.mjs';\nimport { castArray } from '../../../../utils/arrays.mjs';\n\nconst _hoisted_1 = [\"aria-label\", \"onMousedown\"];\nconst _hoisted_2 = {\n  key: 0,\n  scope: \"col\"\n};\nconst _hoisted_3 = [\"aria-label\"];\nconst _hoisted_4 = [\"aria-current\", \"aria-selected\", \"tabindex\"];\nconst _sfc_main = /* @__PURE__ */ defineComponent({\n  __name: \"basic-date-table\",\n  props: basicDateTableProps,\n  emits: [\"changerange\", \"pick\", \"select\"],\n  setup(__props, { expose, emit }) {\n    const props = __props;\n    const ns = useNamespace(\"date-table\");\n    const { t, lang } = useLocale();\n    const tbodyRef = ref();\n    const currentCellRef = ref();\n    const lastRow = ref();\n    const lastColumn = ref();\n    const tableRows = ref([[], [], [], [], [], []]);\n    let focusWithClick = false;\n    const firstDayOfWeek = props.date.$locale().weekStart || 7;\n    const WEEKS_CONSTANT = props.date.locale(\"en\").localeData().weekdaysShort().map((_) => _.toLowerCase());\n    const offsetDay = computed(() => {\n      return firstDayOfWeek > 3 ? 7 - firstDayOfWeek : -firstDayOfWeek;\n    });\n    const startDate = computed(() => {\n      const startDayOfMonth = props.date.startOf(\"month\");\n      return startDayOfMonth.subtract(startDayOfMonth.day() || 7, \"day\");\n    });\n    const WEEKS = computed(() => {\n      return WEEKS_CONSTANT.concat(WEEKS_CONSTANT).slice(firstDayOfWeek, firstDayOfWeek + 7);\n    });\n    const hasCurrent = computed(() => {\n      return flatten(rows.value).some((row) => {\n        return row.isCurrent;\n      });\n    });\n    const days = computed(() => {\n      const startOfMonth = props.date.startOf(\"month\");\n      const startOfMonthDay = startOfMonth.day() || 7;\n      const dateCountOfMonth = startOfMonth.daysInMonth();\n      const dateCountOfLastMonth = startOfMonth.subtract(1, \"month\").daysInMonth();\n      return {\n        startOfMonthDay,\n        dateCountOfMonth,\n        dateCountOfLastMonth\n      };\n    });\n    const selectedDate = computed(() => {\n      return props.selectionMode === \"dates\" ? castArray(props.parsedValue) : [];\n    });\n    const setDateText = (cell, {\n      count,\n      rowIndex,\n      columnIndex\n    }) => {\n      const { startOfMonthDay, dateCountOfMonth, dateCountOfLastMonth } = unref(days);\n      const offset = unref(offsetDay);\n      if (rowIndex >= 0 && rowIndex <= 1) {\n        const numberOfDaysFromPreviousMonth = startOfMonthDay + offset < 0 ? 7 + startOfMonthDay + offset : startOfMonthDay + offset;\n        if (columnIndex + rowIndex * 7 >= numberOfDaysFromPreviousMonth) {\n          cell.text = count;\n          return true;\n        } else {\n          cell.text = dateCountOfLastMonth - (numberOfDaysFromPreviousMonth - columnIndex % 7) + 1 + rowIndex * 7;\n          cell.type = \"prev-month\";\n        }\n      } else {\n        if (count <= dateCountOfMonth) {\n          cell.text = count;\n        } else {\n          cell.text = count - dateCountOfMonth;\n          cell.type = \"next-month\";\n        }\n        return true;\n      }\n      return false;\n    };\n    const setCellMetadata = (cell, {\n      columnIndex,\n      rowIndex\n    }, count) => {\n      const { disabledDate, cellClassName } = props;\n      const _selectedDate = unref(selectedDate);\n      const shouldIncrement = setDateText(cell, { count, rowIndex, columnIndex });\n      const cellDate = cell.dayjs.toDate();\n      cell.selected = _selectedDate.find((d) => d.valueOf() === cell.dayjs.valueOf());\n      cell.isSelected = !!cell.selected;\n      cell.isCurrent = isCurrent(cell);\n      cell.disabled = disabledDate == null ? void 0 : disabledDate(cellDate);\n      cell.customClass = cellClassName == null ? void 0 : cellClassName(cellDate);\n      return shouldIncrement;\n    };\n    const setRowMetadata = (row) => {\n      if (props.selectionMode === \"week\") {\n        const [start, end] = props.showWeekNumber ? [1, 7] : [0, 6];\n        const isActive = isWeekActive(row[start + 1]);\n        row[start].inRange = isActive;\n        row[start].start = isActive;\n        row[end].inRange = isActive;\n        row[end].end = isActive;\n      }\n    };\n    const rows = computed(() => {\n      const { minDate, maxDate, rangeState, showWeekNumber } = props;\n      const offset = offsetDay.value;\n      const rows_ = tableRows.value;\n      const dateUnit = \"day\";\n      let count = 1;\n      if (showWeekNumber) {\n        for (let rowIndex = 0; rowIndex < 6; rowIndex++) {\n          if (!rows_[rowIndex][0]) {\n            rows_[rowIndex][0] = {\n              type: \"week\",\n              text: startDate.value.add(rowIndex * 7 + 1, dateUnit).week()\n            };\n          }\n        }\n      }\n      buildPickerTable({ row: 6, column: 7 }, rows_, {\n        startDate: minDate,\n        columnIndexOffset: showWeekNumber ? 1 : 0,\n        nextEndDate: rangeState.endDate || maxDate || rangeState.selecting && minDate || null,\n        now: dayjs().locale(unref(lang)).startOf(dateUnit),\n        unit: dateUnit,\n        relativeDateGetter: (idx) => startDate.value.add(idx - offset, dateUnit),\n        setCellMetadata: (...args) => {\n          if (setCellMetadata(...args, count)) {\n            count += 1;\n          }\n        },\n        setRowMetadata\n      });\n      return rows_;\n    });\n    watch(() => props.date, async () => {\n      var _a, _b;\n      if ((_a = tbodyRef.value) == null ? void 0 : _a.contains(document.activeElement)) {\n        await nextTick();\n        (_b = currentCellRef.value) == null ? void 0 : _b.focus();\n      }\n    });\n    const focus = async () => {\n      var _a;\n      (_a = currentCellRef.value) == null ? void 0 : _a.focus();\n    };\n    const isNormalDay = (type = \"\") => {\n      return [\"normal\", \"today\"].includes(type);\n    };\n    const isCurrent = (cell) => {\n      return props.selectionMode === \"date\" && isNormalDay(cell.type) && cellMatchesDate(cell, props.parsedValue);\n    };\n    const cellMatchesDate = (cell, date) => {\n      if (!date)\n        return false;\n      return dayjs(date).locale(lang.value).isSame(props.date.date(Number(cell.text)), \"day\");\n    };\n    const getCellClasses = (cell) => {\n      const classes = [];\n      if (isNormalDay(cell.type) && !cell.disabled) {\n        classes.push(\"available\");\n        if (cell.type === \"today\") {\n          classes.push(\"today\");\n        }\n      } else {\n        classes.push(cell.type);\n      }\n      if (isCurrent(cell)) {\n        classes.push(\"current\");\n      }\n      if (cell.inRange && (isNormalDay(cell.type) || props.selectionMode === \"week\")) {\n        classes.push(\"in-range\");\n        if (cell.start) {\n          classes.push(\"start-date\");\n        }\n        if (cell.end) {\n          classes.push(\"end-date\");\n        }\n      }\n      if (cell.disabled) {\n        classes.push(\"disabled\");\n      }\n      if (cell.selected) {\n        classes.push(\"selected\");\n      }\n      if (cell.customClass) {\n        classes.push(cell.customClass);\n      }\n      return classes.join(\" \");\n    };\n    const getDateOfCell = (row, column) => {\n      const offsetFromStart = row * 7 + (column - (props.showWeekNumber ? 1 : 0)) - offsetDay.value;\n      return startDate.value.add(offsetFromStart, \"day\");\n    };\n    const handleMouseMove = (event) => {\n      var _a;\n      if (!props.rangeState.selecting)\n        return;\n      let target = event.target;\n      if (target.tagName === \"SPAN\") {\n        target = (_a = target.parentNode) == null ? void 0 : _a.parentNode;\n      }\n      if (target.tagName === \"DIV\") {\n        target = target.parentNode;\n      }\n      if (target.tagName !== \"TD\")\n        return;\n      const row = target.parentNode.rowIndex - 1;\n      const column = target.cellIndex;\n      if (rows.value[row][column].disabled)\n        return;\n      if (row !== lastRow.value || column !== lastColumn.value) {\n        lastRow.value = row;\n        lastColumn.value = column;\n        emit(\"changerange\", {\n          selecting: true,\n          endDate: getDateOfCell(row, column)\n        });\n      }\n    };\n    const isSelectedCell = (cell) => {\n      return !hasCurrent.value && (cell == null ? void 0 : cell.text) === 1 && cell.type === \"normal\" || cell.isCurrent;\n    };\n    const handleFocus = (event) => {\n      if (focusWithClick || hasCurrent.value || props.selectionMode !== \"date\")\n        return;\n      handlePickDate(event, true);\n    };\n    const handleMouseDown = (event) => {\n      const target = event.target.closest(\"td\");\n      if (!target)\n        return;\n      focusWithClick = true;\n    };\n    const handleMouseUp = (event) => {\n      const target = event.target.closest(\"td\");\n      if (!target)\n        return;\n      focusWithClick = false;\n    };\n    const handlePickDate = (event, isKeyboardMovement = false) => {\n      const target = event.target.closest(\"td\");\n      if (!target)\n        return;\n      const row = target.parentNode.rowIndex - 1;\n      const column = target.cellIndex;\n      const cell = rows.value[row][column];\n      if (cell.disabled || cell.type === \"week\")\n        return;\n      const newDate = getDateOfCell(row, column);\n      if (props.selectionMode === \"range\") {\n        if (!props.rangeState.selecting || !props.minDate) {\n          emit(\"pick\", { minDate: newDate, maxDate: null });\n          emit(\"select\", true);\n        } else {\n          if (newDate >= props.minDate) {\n            emit(\"pick\", { minDate: props.minDate, maxDate: newDate });\n          } else {\n            emit(\"pick\", { minDate: newDate, maxDate: props.minDate });\n          }\n          emit(\"select\", false);\n        }\n      } else if (props.selectionMode === \"date\") {\n        emit(\"pick\", newDate, isKeyboardMovement);\n      } else if (props.selectionMode === \"week\") {\n        const weekNumber = newDate.week();\n        const value = `${newDate.year()}w${weekNumber}`;\n        emit(\"pick\", {\n          year: newDate.year(),\n          week: weekNumber,\n          value,\n          date: newDate.startOf(\"week\")\n        });\n      } else if (props.selectionMode === \"dates\") {\n        const newValue = cell.selected ? castArray(props.parsedValue).filter((d) => (d == null ? void 0 : d.valueOf()) !== newDate.valueOf()) : castArray(props.parsedValue).concat([newDate]);\n        emit(\"pick\", newValue);\n      }\n    };\n    const isWeekActive = (cell) => {\n      if (props.selectionMode !== \"week\")\n        return false;\n      let newDate = props.date.startOf(\"day\");\n      if (cell.type === \"prev-month\") {\n        newDate = newDate.subtract(1, \"month\");\n      }\n      if (cell.type === \"next-month\") {\n        newDate = newDate.add(1, \"month\");\n      }\n      newDate = newDate.date(Number.parseInt(cell.text, 10));\n      if (props.parsedValue && !Array.isArray(props.parsedValue)) {\n        const dayOffset = (props.parsedValue.day() - firstDayOfWeek + 7) % 7 - 1;\n        const weekDate = props.parsedValue.subtract(dayOffset, \"day\");\n        return weekDate.isSame(newDate, \"day\");\n      }\n      return false;\n    };\n    expose({\n      focus\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"table\", {\n        role: \"grid\",\n        \"aria-label\": unref(t)(\"el.datepicker.dateTablePrompt\"),\n        cellspacing: \"0\",\n        cellpadding: \"0\",\n        class: normalizeClass([unref(ns).b(), { \"is-week-mode\": _ctx.selectionMode === \"week\" }]),\n        onClick: handlePickDate,\n        onMousemove: handleMouseMove,\n        onMousedown: withModifiers(handleMouseDown, [\"prevent\"]),\n        onMouseup: handleMouseUp\n      }, [\n        createElementVNode(\"tbody\", {\n          ref_key: \"tbodyRef\",\n          ref: tbodyRef\n        }, [\n          createElementVNode(\"tr\", null, [\n            _ctx.showWeekNumber ? (openBlock(), createElementBlock(\"th\", _hoisted_2, toDisplayString(unref(t)(\"el.datepicker.week\")), 1)) : createCommentVNode(\"v-if\", true),\n            (openBlock(true), createElementBlock(Fragment, null, renderList(unref(WEEKS), (week, key) => {\n              return openBlock(), createElementBlock(\"th\", {\n                key,\n                scope: \"col\",\n                \"aria-label\": unref(t)(\"el.datepicker.weeksFull.\" + week)\n              }, toDisplayString(unref(t)(\"el.datepicker.weeks.\" + week)), 9, _hoisted_3);\n            }), 128))\n          ]),\n          (openBlock(true), createElementBlock(Fragment, null, renderList(unref(rows), (row, rowKey) => {\n            return openBlock(), createElementBlock(\"tr\", {\n              key: rowKey,\n              class: normalizeClass([unref(ns).e(\"row\"), { current: isWeekActive(row[1]) }])\n            }, [\n              (openBlock(true), createElementBlock(Fragment, null, renderList(row, (cell, columnKey) => {\n                return openBlock(), createElementBlock(\"td\", {\n                  key: `${rowKey}.${columnKey}`,\n                  ref_for: true,\n                  ref: (el) => isSelectedCell(cell) && (currentCellRef.value = el),\n                  class: normalizeClass(getCellClasses(cell)),\n                  \"aria-current\": cell.isCurrent ? \"date\" : void 0,\n                  \"aria-selected\": cell.isCurrent,\n                  tabindex: isSelectedCell(cell) ? 0 : -1,\n                  onFocus: handleFocus\n                }, [\n                  createVNode(unref(ElDatePickerCell), { cell }, null, 8, [\"cell\"])\n                ], 42, _hoisted_4);\n              }), 128))\n            ], 2);\n          }), 128))\n        ], 512)\n      ], 42, _hoisted_1);\n    };\n  }\n});\nvar DateTable = /* @__PURE__ */ _export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/date-picker/src/date-picker-com/basic-date-table.vue\"]]);\n\nexport { DateTable as default };\n//# sourceMappingURL=basic-date-table.mjs.map\n","start":1680880662411,"end":1680880662967}]}
