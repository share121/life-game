{"resolvedId":"D:/360MoveData/Users/28546/Desktop/VSCode/ts/life/node_modules/.store/element-plus@2.3.2/node_modules/element-plus/es/components/dialog/src/dialog2.mjs","transforms":[{"name":"vite:load-fallback","result":"import { defineComponent, useSlots, computed, ref, provide, openBlock, createBlock, Teleport, createVNode, Transition, unref, withCtx, withDirectives, createElementVNode, normalizeClass, normalizeStyle, mergeProps, createSlots, renderSlot, createCommentVNode, vShow } from 'vue';\nimport { ElOverlay } from '../../overlay/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../focus-trap/index.mjs';\nimport ElDialogContent from './dialog-content2.mjs';\nimport { dialogInjectionKey } from './constants.mjs';\nimport { dialogProps, dialogEmits } from './dialog.mjs';\nimport { useDialog } from './use-dialog.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useDeprecated } from '../../../hooks/use-deprecated/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useSameTarget } from '../../../hooks/use-same-target/index.mjs';\nimport ElFocusTrap from '../../focus-trap/src/focus-trap.mjs';\n\nconst _hoisted_1 = [\"aria-label\", \"aria-labelledby\", \"aria-describedby\"];\nconst __default__ = defineComponent({\n  name: \"ElDialog\",\n  inheritAttrs: false\n});\nconst _sfc_main = /* @__PURE__ */ defineComponent({\n  ...__default__,\n  props: dialogProps,\n  emits: dialogEmits,\n  setup(__props, { expose }) {\n    const props = __props;\n    const slots = useSlots();\n    useDeprecated({\n      scope: \"el-dialog\",\n      from: \"the title slot\",\n      replacement: \"the header slot\",\n      version: \"3.0.0\",\n      ref: \"https://element-plus.org/en-US/component/dialog.html#slots\"\n    }, computed(() => !!slots.title));\n    useDeprecated({\n      scope: \"el-dialog\",\n      from: \"custom-class\",\n      replacement: \"class\",\n      version: \"2.3.0\",\n      ref: \"https://element-plus.org/en-US/component/dialog.html#attributes\",\n      type: \"Attribute\"\n    }, computed(() => !!props.customClass));\n    const ns = useNamespace(\"dialog\");\n    const dialogRef = ref();\n    const headerRef = ref();\n    const dialogContentRef = ref();\n    const {\n      visible,\n      titleId,\n      bodyId,\n      style,\n      overlayDialogStyle,\n      rendered,\n      zIndex,\n      afterEnter,\n      afterLeave,\n      beforeLeave,\n      handleClose,\n      onModalClick,\n      onOpenAutoFocus,\n      onCloseAutoFocus,\n      onCloseRequested,\n      onFocusoutPrevented\n    } = useDialog(props, dialogRef);\n    provide(dialogInjectionKey, {\n      dialogRef,\n      headerRef,\n      bodyId,\n      ns,\n      rendered,\n      style\n    });\n    const overlayEvent = useSameTarget(onModalClick);\n    const draggable = computed(() => props.draggable && !props.fullscreen);\n    expose({\n      visible,\n      dialogContentRef\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(Teleport, {\n        to: \"body\",\n        disabled: !_ctx.appendToBody\n      }, [\n        createVNode(Transition, {\n          name: \"dialog-fade\",\n          onAfterEnter: unref(afterEnter),\n          onAfterLeave: unref(afterLeave),\n          onBeforeLeave: unref(beforeLeave),\n          persisted: \"\"\n        }, {\n          default: withCtx(() => [\n            withDirectives(createVNode(unref(ElOverlay), {\n              \"custom-mask-event\": \"\",\n              mask: _ctx.modal,\n              \"overlay-class\": _ctx.modalClass,\n              \"z-index\": unref(zIndex)\n            }, {\n              default: withCtx(() => [\n                createElementVNode(\"div\", {\n                  role: \"dialog\",\n                  \"aria-modal\": \"true\",\n                  \"aria-label\": _ctx.title || void 0,\n                  \"aria-labelledby\": !_ctx.title ? unref(titleId) : void 0,\n                  \"aria-describedby\": unref(bodyId),\n                  class: normalizeClass(`${unref(ns).namespace.value}-overlay-dialog`),\n                  style: normalizeStyle(unref(overlayDialogStyle)),\n                  onClick: _cache[0] || (_cache[0] = (...args) => unref(overlayEvent).onClick && unref(overlayEvent).onClick(...args)),\n                  onMousedown: _cache[1] || (_cache[1] = (...args) => unref(overlayEvent).onMousedown && unref(overlayEvent).onMousedown(...args)),\n                  onMouseup: _cache[2] || (_cache[2] = (...args) => unref(overlayEvent).onMouseup && unref(overlayEvent).onMouseup(...args))\n                }, [\n                  createVNode(unref(ElFocusTrap), {\n                    loop: \"\",\n                    trapped: unref(visible),\n                    \"focus-start-el\": \"container\",\n                    onFocusAfterTrapped: unref(onOpenAutoFocus),\n                    onFocusAfterReleased: unref(onCloseAutoFocus),\n                    onFocusoutPrevented: unref(onFocusoutPrevented),\n                    onReleaseRequested: unref(onCloseRequested)\n                  }, {\n                    default: withCtx(() => [\n                      unref(rendered) ? (openBlock(), createBlock(ElDialogContent, mergeProps({\n                        key: 0,\n                        ref_key: \"dialogContentRef\",\n                        ref: dialogContentRef\n                      }, _ctx.$attrs, {\n                        \"custom-class\": _ctx.customClass,\n                        center: _ctx.center,\n                        \"align-center\": _ctx.alignCenter,\n                        \"close-icon\": _ctx.closeIcon,\n                        draggable: unref(draggable),\n                        fullscreen: _ctx.fullscreen,\n                        \"show-close\": _ctx.showClose,\n                        title: _ctx.title,\n                        onClose: unref(handleClose)\n                      }), createSlots({\n                        header: withCtx(() => [\n                          !_ctx.$slots.title ? renderSlot(_ctx.$slots, \"header\", {\n                            key: 0,\n                            close: unref(handleClose),\n                            titleId: unref(titleId),\n                            titleClass: unref(ns).e(\"title\")\n                          }) : renderSlot(_ctx.$slots, \"title\", { key: 1 })\n                        ]),\n                        default: withCtx(() => [\n                          renderSlot(_ctx.$slots, \"default\")\n                        ]),\n                        _: 2\n                      }, [\n                        _ctx.$slots.footer ? {\n                          name: \"footer\",\n                          fn: withCtx(() => [\n                            renderSlot(_ctx.$slots, \"footer\")\n                          ])\n                        } : void 0\n                      ]), 1040, [\"custom-class\", \"center\", \"align-center\", \"close-icon\", \"draggable\", \"fullscreen\", \"show-close\", \"title\", \"onClose\"])) : createCommentVNode(\"v-if\", true)\n                    ]),\n                    _: 3\n                  }, 8, [\"trapped\", \"onFocusAfterTrapped\", \"onFocusAfterReleased\", \"onFocusoutPrevented\", \"onReleaseRequested\"])\n                ], 46, _hoisted_1)\n              ]),\n              _: 3\n            }, 8, [\"mask\", \"overlay-class\", \"z-index\"]), [\n              [vShow, unref(visible)]\n            ])\n          ]),\n          _: 3\n        }, 8, [\"onAfterEnter\", \"onAfterLeave\", \"onBeforeLeave\"])\n      ], 8, [\"disabled\"]);\n    };\n  }\n});\nvar Dialog = /* @__PURE__ */ _export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/dialog/src/dialog.vue\"]]);\n\nexport { Dialog as default };\n//# sourceMappingURL=dialog2.mjs.map\n","start":1680878570642,"end":1680878571293}]}
