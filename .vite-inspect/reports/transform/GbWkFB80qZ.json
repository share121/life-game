{"resolvedId":"D:/360MoveData/Users/28546/Desktop/VSCode/ts/life/node_modules/.store/element-plus@2.3.2/node_modules/element-plus/es/components/color-picker/src/components/predefine.mjs","transforms":[{"name":"vite:load-fallback","result":"import { defineComponent, inject, ref, watch, watchEffect, openBlock, createElementBlock, normalizeClass, createElementVNode, Fragment, renderList, normalizeStyle } from 'vue';\nimport '../../../../hooks/index.mjs';\nimport { colorPickerContextKey } from '../color-picker.mjs';\nimport Color from '../utils/color.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\n\nconst _sfc_main = defineComponent({\n  props: {\n    colors: {\n      type: Array,\n      required: true\n    },\n    color: {\n      type: Object,\n      required: true\n    }\n  },\n  setup(props) {\n    const ns = useNamespace(\"color-predefine\");\n    const { currentColor } = inject(colorPickerContextKey);\n    const rgbaColors = ref(parseColors(props.colors, props.color));\n    watch(() => currentColor.value, (val) => {\n      const color = new Color();\n      color.fromString(val);\n      rgbaColors.value.forEach((item) => {\n        item.selected = color.compare(item);\n      });\n    });\n    watchEffect(() => {\n      rgbaColors.value = parseColors(props.colors, props.color);\n    });\n    function handleSelect(index) {\n      props.color.fromString(props.colors[index]);\n    }\n    function parseColors(colors, color) {\n      return colors.map((value) => {\n        const c = new Color();\n        c.enableAlpha = true;\n        c.format = \"rgba\";\n        c.fromString(value);\n        c.selected = c.value === color.value;\n        return c;\n      });\n    }\n    return {\n      rgbaColors,\n      handleSelect,\n      ns\n    };\n  }\n});\nconst _hoisted_1 = [\"onClick\"];\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass(_ctx.ns.b())\n  }, [\n    createElementVNode(\"div\", {\n      class: normalizeClass(_ctx.ns.e(\"colors\"))\n    }, [\n      (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.rgbaColors, (item, index) => {\n        return openBlock(), createElementBlock(\"div\", {\n          key: _ctx.colors[index],\n          class: normalizeClass([\n            _ctx.ns.e(\"color-selector\"),\n            _ctx.ns.is(\"alpha\", item._alpha < 100),\n            { selected: item.selected }\n          ]),\n          onClick: ($event) => _ctx.handleSelect(index)\n        }, [\n          createElementVNode(\"div\", {\n            style: normalizeStyle({ backgroundColor: item.value })\n          }, null, 4)\n        ], 10, _hoisted_1);\n      }), 128))\n    ], 2)\n  ], 2);\n}\nvar Predefine = /* @__PURE__ */ _export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/color-picker/src/components/predefine.vue\"]]);\n\nexport { Predefine as default };\n//# sourceMappingURL=predefine.mjs.map\n","start":1680879316291,"end":1680879317039}]}
