{"resolvedId":"D:/360MoveData/Users/28546/Desktop/VSCode/ts/life/node_modules/.store/element-plus@2.3.2/node_modules/element-plus/es/components/checkbox/src/composables/use-checkbox-status.mjs","transforms":[{"name":"vite:load-fallback","result":"import { inject, ref, computed, toRaw } from 'vue';\nimport { isEqual } from 'lodash-unified';\nimport '../../../form/index.mjs';\nimport '../../../../utils/index.mjs';\nimport { checkboxGroupContextKey } from '../constants.mjs';\nimport { isBoolean } from '@vueuse/core';\nimport { isArray, isObject } from '@vue/shared';\nimport { useFormSize } from '../../../form/src/hooks/use-form-common-props.mjs';\n\nconst useCheckboxStatus = (props, slots, { model }) => {\n  const checkboxGroup = inject(checkboxGroupContextKey, void 0);\n  const isFocused = ref(false);\n  const isChecked = computed(() => {\n    const value = model.value;\n    if (isBoolean(value)) {\n      return value;\n    } else if (isArray(value)) {\n      if (isObject(props.label)) {\n        return value.map(toRaw).some((o) => isEqual(o, props.label));\n      } else {\n        return value.map(toRaw).includes(props.label);\n      }\n    } else if (value !== null && value !== void 0) {\n      return value === props.trueLabel;\n    } else {\n      return !!value;\n    }\n  });\n  const checkboxButtonSize = useFormSize(computed(() => {\n    var _a;\n    return (_a = checkboxGroup == null ? void 0 : checkboxGroup.size) == null ? void 0 : _a.value;\n  }), {\n    prop: true\n  });\n  const checkboxSize = useFormSize(computed(() => {\n    var _a;\n    return (_a = checkboxGroup == null ? void 0 : checkboxGroup.size) == null ? void 0 : _a.value;\n  }));\n  const hasOwnLabel = computed(() => {\n    return !!(slots.default || props.label);\n  });\n  return {\n    checkboxButtonSize,\n    isChecked,\n    isFocused,\n    checkboxSize,\n    hasOwnLabel\n  };\n};\n\nexport { useCheckboxStatus };\n//# sourceMappingURL=use-checkbox-status.mjs.map\n","start":1680879318641,"end":1680879318842}]}
