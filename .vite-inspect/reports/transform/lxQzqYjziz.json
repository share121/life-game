{"resolvedId":"D:/360MoveData/Users/28546/Desktop/VSCode/ts/life/node_modules/.store/element-plus@2.3.2/node_modules/element-plus/es/components/steps/src/item2.mjs","transforms":[{"name":"vite:load-fallback","result":"import { defineComponent, ref, inject, getCurrentInstance, onMounted, watch, onBeforeUnmount, computed, reactive, openBlock, createElementBlock, normalizeStyle, unref, normalizeClass, createCommentVNode, createElementVNode, renderSlot, createBlock, withCtx, resolveDynamicComponent, createVNode, toDisplayString, createTextVNode } from 'vue';\nimport '../../../hooks/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { Check, Close } from '@element-plus/icons-vue';\nimport '../../../utils/index.mjs';\nimport { stepProps } from './item.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { isNumber } from '@vueuse/core';\n\nconst __default__ = defineComponent({\n  name: \"ElStep\"\n});\nconst _sfc_main = defineComponent({\n  ...__default__,\n  props: stepProps,\n  setup(__props) {\n    const props = __props;\n    const ns = useNamespace(\"step\");\n    const index = ref(-1);\n    const lineStyle = ref({});\n    const internalStatus = ref(\"\");\n    const parent = inject(\"ElSteps\");\n    const currentInstance = getCurrentInstance();\n    onMounted(() => {\n      watch([\n        () => parent.props.active,\n        () => parent.props.processStatus,\n        () => parent.props.finishStatus\n      ], ([active]) => {\n        updateStatus(active);\n      }, { immediate: true });\n    });\n    onBeforeUnmount(() => {\n      parent.steps.value = parent.steps.value.filter((instance) => instance.uid !== (currentInstance == null ? void 0 : currentInstance.uid));\n    });\n    const currentStatus = computed(() => {\n      return props.status || internalStatus.value;\n    });\n    const prevStatus = computed(() => {\n      const prevStep = parent.steps.value[index.value - 1];\n      return prevStep ? prevStep.currentStatus : \"wait\";\n    });\n    const isCenter = computed(() => {\n      return parent.props.alignCenter;\n    });\n    const isVertical = computed(() => {\n      return parent.props.direction === \"vertical\";\n    });\n    const isSimple = computed(() => {\n      return parent.props.simple;\n    });\n    const stepsCount = computed(() => {\n      return parent.steps.value.length;\n    });\n    const isLast = computed(() => {\n      var _a;\n      return ((_a = parent.steps.value[stepsCount.value - 1]) == null ? void 0 : _a.uid) === (currentInstance == null ? void 0 : currentInstance.uid);\n    });\n    const space = computed(() => {\n      return isSimple.value ? \"\" : parent.props.space;\n    });\n    const style = computed(() => {\n      const style2 = {\n        flexBasis: isNumber(space.value) ? `${space.value}px` : space.value ? space.value : `${100 / (stepsCount.value - (isCenter.value ? 0 : 1))}%`\n      };\n      if (isVertical.value)\n        return style2;\n      if (isLast.value) {\n        style2.maxWidth = `${100 / stepsCount.value}%`;\n      }\n      return style2;\n    });\n    const setIndex = (val) => {\n      index.value = val;\n    };\n    const calcProgress = (status) => {\n      const isWait = status === \"wait\";\n      const style2 = {\n        transitionDelay: `${isWait ? \"-\" : \"\"}${150 * index.value}ms`\n      };\n      const step = status === parent.props.processStatus || isWait ? 0 : 100;\n      style2.borderWidth = step && !isSimple.value ? \"1px\" : 0;\n      style2[parent.props.direction === \"vertical\" ? \"height\" : \"width\"] = `${step}%`;\n      lineStyle.value = style2;\n    };\n    const updateStatus = (activeIndex) => {\n      if (activeIndex > index.value) {\n        internalStatus.value = parent.props.finishStatus;\n      } else if (activeIndex === index.value && prevStatus.value !== \"error\") {\n        internalStatus.value = parent.props.processStatus;\n      } else {\n        internalStatus.value = \"wait\";\n      }\n      const prevChild = parent.steps.value[index.value - 1];\n      if (prevChild)\n        prevChild.calcProgress(internalStatus.value);\n    };\n    const stepItemState = reactive({\n      uid: computed(() => currentInstance == null ? void 0 : currentInstance.uid),\n      currentStatus,\n      setIndex,\n      calcProgress\n    });\n    parent.steps.value = [...parent.steps.value, stepItemState];\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        style: normalizeStyle(unref(style)),\n        class: normalizeClass([\n          unref(ns).b(),\n          unref(ns).is(unref(isSimple) ? \"simple\" : unref(parent).props.direction),\n          unref(ns).is(\"flex\", unref(isLast) && !unref(space) && !unref(isCenter)),\n          unref(ns).is(\"center\", unref(isCenter) && !unref(isVertical) && !unref(isSimple))\n        ])\n      }, [\n        createCommentVNode(\" icon & line \"),\n        createElementVNode(\"div\", {\n          class: normalizeClass([unref(ns).e(\"head\"), unref(ns).is(unref(currentStatus))])\n        }, [\n          !unref(isSimple) ? (openBlock(), createElementBlock(\"div\", {\n            key: 0,\n            class: normalizeClass(unref(ns).e(\"line\"))\n          }, [\n            createElementVNode(\"i\", {\n              class: normalizeClass(unref(ns).e(\"line-inner\")),\n              style: normalizeStyle(lineStyle.value)\n            }, null, 6)\n          ], 2)) : createCommentVNode(\"v-if\", true),\n          createElementVNode(\"div\", {\n            class: normalizeClass([unref(ns).e(\"icon\"), unref(ns).is(_ctx.icon || _ctx.$slots.icon ? \"icon\" : \"text\")])\n          }, [\n            renderSlot(_ctx.$slots, \"icon\", {}, () => [\n              _ctx.icon ? (openBlock(), createBlock(unref(ElIcon), {\n                key: 0,\n                class: normalizeClass(unref(ns).e(\"icon-inner\"))\n              }, {\n                default: withCtx(() => [\n                  (openBlock(), createBlock(resolveDynamicComponent(_ctx.icon)))\n                ]),\n                _: 1\n              }, 8, [\"class\"])) : unref(currentStatus) === \"success\" ? (openBlock(), createBlock(unref(ElIcon), {\n                key: 1,\n                class: normalizeClass([unref(ns).e(\"icon-inner\"), unref(ns).is(\"status\")])\n              }, {\n                default: withCtx(() => [\n                  createVNode(unref(Check))\n                ]),\n                _: 1\n              }, 8, [\"class\"])) : unref(currentStatus) === \"error\" ? (openBlock(), createBlock(unref(ElIcon), {\n                key: 2,\n                class: normalizeClass([unref(ns).e(\"icon-inner\"), unref(ns).is(\"status\")])\n              }, {\n                default: withCtx(() => [\n                  createVNode(unref(Close))\n                ]),\n                _: 1\n              }, 8, [\"class\"])) : !unref(isSimple) ? (openBlock(), createElementBlock(\"div\", {\n                key: 3,\n                class: normalizeClass(unref(ns).e(\"icon-inner\"))\n              }, toDisplayString(index.value + 1), 3)) : createCommentVNode(\"v-if\", true)\n            ])\n          ], 2)\n        ], 2),\n        createCommentVNode(\" title & description \"),\n        createElementVNode(\"div\", {\n          class: normalizeClass(unref(ns).e(\"main\"))\n        }, [\n          createElementVNode(\"div\", {\n            class: normalizeClass([unref(ns).e(\"title\"), unref(ns).is(unref(currentStatus))])\n          }, [\n            renderSlot(_ctx.$slots, \"title\", {}, () => [\n              createTextVNode(toDisplayString(_ctx.title), 1)\n            ])\n          ], 2),\n          unref(isSimple) ? (openBlock(), createElementBlock(\"div\", {\n            key: 0,\n            class: normalizeClass(unref(ns).e(\"arrow\"))\n          }, null, 2)) : (openBlock(), createElementBlock(\"div\", {\n            key: 1,\n            class: normalizeClass([unref(ns).e(\"description\"), unref(ns).is(unref(currentStatus))])\n          }, [\n            renderSlot(_ctx.$slots, \"description\", {}, () => [\n              createTextVNode(toDisplayString(_ctx.description), 1)\n            ])\n          ], 2))\n        ], 2)\n      ], 6);\n    };\n  }\n});\nvar Step = /* @__PURE__ */ _export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/steps/src/item.vue\"]]);\n\nexport { Step as default };\n//# sourceMappingURL=item2.mjs.map\n","start":1680878572244,"end":1680878572902}]}
