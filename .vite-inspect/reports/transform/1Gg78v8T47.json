{"resolvedId":"D:/360MoveData/Users/28546/Desktop/VSCode/ts/life/node_modules/.store/element-plus@2.3.2/node_modules/element-plus/es/hooks/use-floating/index.mjs","transforms":[{"name":"vite:load-fallback","result":"import { isRef, ref, unref, onMounted, watchEffect } from 'vue';\nimport { isClient, unrefElement } from '@vueuse/core';\nimport { isNil } from 'lodash-unified';\nimport { computePosition, arrow } from '@floating-ui/dom';\nimport '../../utils/index.mjs';\nimport { buildProps } from '../../utils/vue/props/runtime.mjs';\nimport { keysOf } from '../../utils/objects.mjs';\n\nconst useFloatingProps = buildProps({});\nconst unrefReference = (elRef) => {\n  if (!isClient)\n    return;\n  if (!elRef)\n    return elRef;\n  const unrefEl = unrefElement(elRef);\n  if (unrefEl)\n    return unrefEl;\n  return isRef(elRef) ? unrefEl : elRef;\n};\nconst getPositionDataWithUnit = (record, key) => {\n  const value = record == null ? void 0 : record[key];\n  return isNil(value) ? \"\" : `${value}px`;\n};\nconst useFloating = ({\n  middleware,\n  placement,\n  strategy\n}) => {\n  const referenceRef = ref();\n  const contentRef = ref();\n  const x = ref();\n  const y = ref();\n  const middlewareData = ref({});\n  const states = {\n    x,\n    y,\n    placement,\n    strategy,\n    middlewareData\n  };\n  const update = async () => {\n    if (!isClient)\n      return;\n    const referenceEl = unrefReference(referenceRef);\n    const contentEl = unrefElement(contentRef);\n    if (!referenceEl || !contentEl)\n      return;\n    const data = await computePosition(referenceEl, contentEl, {\n      placement: unref(placement),\n      strategy: unref(strategy),\n      middleware: unref(middleware)\n    });\n    keysOf(states).forEach((key) => {\n      states[key].value = data[key];\n    });\n  };\n  onMounted(() => {\n    watchEffect(() => {\n      update();\n    });\n  });\n  return {\n    ...states,\n    update,\n    referenceRef,\n    contentRef\n  };\n};\nconst arrowMiddleware = ({\n  arrowRef,\n  padding\n}) => {\n  return {\n    name: \"arrow\",\n    options: {\n      element: arrowRef,\n      padding\n    },\n    fn(args) {\n      const arrowEl = unref(arrowRef);\n      if (!arrowEl)\n        return {};\n      return arrow({\n        element: arrowEl,\n        padding\n      }).fn(args);\n    }\n  };\n};\n\nexport { arrowMiddleware, getPositionDataWithUnit, useFloating, useFloatingProps };\n//# sourceMappingURL=index.mjs.map\n","start":1680878568377,"end":1680878568602}]}
