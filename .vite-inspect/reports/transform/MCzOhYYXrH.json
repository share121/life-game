{"resolvedId":"D:/360MoveData/Users/28546/Desktop/VSCode/ts/life/node_modules/.store/element-plus@2.3.2/node_modules/element-plus/es/components/color-picker/src/color-picker2.mjs","transforms":[{"name":"vite:load-fallback","result":"import { defineComponent, ref, reactive, computed, nextTick, onMounted, watch, provide, openBlock, createBlock, unref, withCtx, withDirectives, createElementBlock, createElementVNode, normalizeClass, createVNode, createCommentVNode, withKeys, createTextVNode, toDisplayString, normalizeStyle, vShow } from 'vue';\nimport { debounce } from 'lodash-unified';\nimport { ElButton } from '../../button/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../directives/index.mjs';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport '../../form/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../constants/index.mjs';\nimport '../../../utils/index.mjs';\nimport { ArrowDown, Close } from '@element-plus/icons-vue';\nimport AlphaSlider from './components/alpha-slider.mjs';\nimport HueSlider from './components/hue-slider.mjs';\nimport Predefine from './components/predefine.mjs';\nimport SvPanel from './components/sv-panel.mjs';\nimport Color from './utils/color.mjs';\nimport { colorPickerProps, colorPickerEmits, colorPickerContextKey } from './color-picker.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useFormItem, useFormItemInputId } from '../../form/src/hooks/use-form-item.mjs';\nimport { useFormSize, useFormDisabled } from '../../form/src/hooks/use-form-common-props.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport ClickOutside from '../../../directives/click-outside/index.mjs';\n\nconst _hoisted_1 = [\"id\", \"aria-label\", \"aria-labelledby\", \"aria-description\", \"tabindex\", \"onKeydown\"];\nconst __default__ = defineComponent({\n  name: \"ElColorPicker\"\n});\nconst _sfc_main = /* @__PURE__ */ defineComponent({\n  ...__default__,\n  props: colorPickerProps,\n  emits: colorPickerEmits,\n  setup(__props, { expose, emit }) {\n    const props = __props;\n    const { t } = useLocale();\n    const ns = useNamespace(\"color\");\n    const { formItem } = useFormItem();\n    const colorSize = useFormSize();\n    const colorDisabled = useFormDisabled();\n    const { inputId: buttonId, isLabeledByFormItem } = useFormItemInputId(props, {\n      formItemContext: formItem\n    });\n    const hue = ref();\n    const sv = ref();\n    const alpha = ref();\n    const popper = ref();\n    let shouldActiveChange = true;\n    const color = reactive(new Color({\n      enableAlpha: props.showAlpha,\n      format: props.colorFormat || \"\",\n      value: props.modelValue\n    }));\n    const showPicker = ref(false);\n    const showPanelColor = ref(false);\n    const customInput = ref(\"\");\n    const displayedColor = computed(() => {\n      if (!props.modelValue && !showPanelColor.value) {\n        return \"transparent\";\n      }\n      return displayedRgb(color, props.showAlpha);\n    });\n    const currentColor = computed(() => {\n      return !props.modelValue && !showPanelColor.value ? \"\" : color.value;\n    });\n    const buttonAriaLabel = computed(() => {\n      return !isLabeledByFormItem.value ? props.label || t(\"el.colorpicker.defaultLabel\") : void 0;\n    });\n    const buttonAriaLabelledby = computed(() => {\n      return isLabeledByFormItem.value ? formItem == null ? void 0 : formItem.labelId : void 0;\n    });\n    const btnKls = computed(() => {\n      return [\n        ns.b(\"picker\"),\n        ns.is(\"disabled\", colorDisabled.value),\n        ns.bm(\"picker\", colorSize.value)\n      ];\n    });\n    function displayedRgb(color2, showAlpha) {\n      if (!(color2 instanceof Color)) {\n        throw new TypeError(\"color should be instance of _color Class\");\n      }\n      const { r, g, b } = color2.toRgb();\n      return showAlpha ? `rgba(${r}, ${g}, ${b}, ${color2.get(\"alpha\") / 100})` : `rgb(${r}, ${g}, ${b})`;\n    }\n    function setShowPicker(value) {\n      showPicker.value = value;\n    }\n    const debounceSetShowPicker = debounce(setShowPicker, 100);\n    function hide() {\n      debounceSetShowPicker(false);\n      resetColor();\n    }\n    function resetColor() {\n      nextTick(() => {\n        if (props.modelValue) {\n          color.fromString(props.modelValue);\n        } else {\n          color.value = \"\";\n          nextTick(() => {\n            showPanelColor.value = false;\n          });\n        }\n      });\n    }\n    function handleTrigger() {\n      if (colorDisabled.value)\n        return;\n      debounceSetShowPicker(!showPicker.value);\n    }\n    function handleConfirm() {\n      color.fromString(customInput.value);\n    }\n    function confirmValue() {\n      const value = color.value;\n      emit(UPDATE_MODEL_EVENT, value);\n      emit(\"change\", value);\n      if (props.validateEvent) {\n        formItem == null ? void 0 : formItem.validate(\"change\").catch((err) => debugWarn(err));\n      }\n      debounceSetShowPicker(false);\n      nextTick(() => {\n        const newColor = new Color({\n          enableAlpha: props.showAlpha,\n          format: props.colorFormat || \"\",\n          value: props.modelValue\n        });\n        if (!color.compare(newColor)) {\n          resetColor();\n        }\n      });\n    }\n    function clear() {\n      debounceSetShowPicker(false);\n      emit(UPDATE_MODEL_EVENT, null);\n      emit(\"change\", null);\n      if (props.modelValue !== null && props.validateEvent) {\n        formItem == null ? void 0 : formItem.validate(\"change\").catch((err) => debugWarn(err));\n      }\n      resetColor();\n    }\n    onMounted(() => {\n      if (props.modelValue) {\n        customInput.value = currentColor.value;\n      }\n    });\n    watch(() => props.modelValue, (newVal) => {\n      if (!newVal) {\n        showPanelColor.value = false;\n      } else if (newVal && newVal !== color.value) {\n        shouldActiveChange = false;\n        color.fromString(newVal);\n      }\n    });\n    watch(() => currentColor.value, (val) => {\n      customInput.value = val;\n      shouldActiveChange && emit(\"activeChange\", val);\n      shouldActiveChange = true;\n    });\n    watch(() => color.value, () => {\n      if (!props.modelValue && !showPanelColor.value) {\n        showPanelColor.value = true;\n      }\n    });\n    watch(() => showPicker.value, () => {\n      nextTick(() => {\n        var _a, _b, _c;\n        (_a = hue.value) == null ? void 0 : _a.update();\n        (_b = sv.value) == null ? void 0 : _b.update();\n        (_c = alpha.value) == null ? void 0 : _c.update();\n      });\n    });\n    provide(colorPickerContextKey, {\n      currentColor\n    });\n    expose({\n      color\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(unref(ElTooltip), {\n        ref_key: \"popper\",\n        ref: popper,\n        visible: showPicker.value,\n        \"show-arrow\": false,\n        \"fallback-placements\": [\"bottom\", \"top\", \"right\", \"left\"],\n        offset: 0,\n        \"gpu-acceleration\": false,\n        \"popper-class\": [unref(ns).be(\"picker\", \"panel\"), unref(ns).b(\"dropdown\"), _ctx.popperClass],\n        \"stop-popper-mouse-event\": false,\n        effect: \"light\",\n        trigger: \"click\",\n        transition: `${unref(ns).namespace.value}-zoom-in-top`,\n        persistent: \"\"\n      }, {\n        content: withCtx(() => [\n          withDirectives((openBlock(), createElementBlock(\"div\", null, [\n            createElementVNode(\"div\", {\n              class: normalizeClass(unref(ns).be(\"dropdown\", \"main-wrapper\"))\n            }, [\n              createVNode(HueSlider, {\n                ref_key: \"hue\",\n                ref: hue,\n                class: \"hue-slider\",\n                color: unref(color),\n                vertical: \"\"\n              }, null, 8, [\"color\"]),\n              createVNode(SvPanel, {\n                ref: \"svPanel\",\n                color: unref(color)\n              }, null, 8, [\"color\"])\n            ], 2),\n            _ctx.showAlpha ? (openBlock(), createBlock(AlphaSlider, {\n              key: 0,\n              ref_key: \"alpha\",\n              ref: alpha,\n              color: unref(color)\n            }, null, 8, [\"color\"])) : createCommentVNode(\"v-if\", true),\n            _ctx.predefine ? (openBlock(), createBlock(Predefine, {\n              key: 1,\n              ref: \"predefine\",\n              color: unref(color),\n              colors: _ctx.predefine\n            }, null, 8, [\"color\", \"colors\"])) : createCommentVNode(\"v-if\", true),\n            createElementVNode(\"div\", {\n              class: normalizeClass(unref(ns).be(\"dropdown\", \"btns\"))\n            }, [\n              createElementVNode(\"span\", {\n                class: normalizeClass(unref(ns).be(\"dropdown\", \"value\"))\n              }, [\n                createVNode(unref(ElInput), {\n                  modelValue: customInput.value,\n                  \"onUpdate:modelValue\": _cache[0] || (_cache[0] = ($event) => customInput.value = $event),\n                  \"validate-event\": false,\n                  size: \"small\",\n                  onKeyup: withKeys(handleConfirm, [\"enter\"]),\n                  onBlur: handleConfirm\n                }, null, 8, [\"modelValue\", \"onKeyup\"])\n              ], 2),\n              createVNode(unref(ElButton), {\n                class: normalizeClass(unref(ns).be(\"dropdown\", \"link-btn\")),\n                text: \"\",\n                size: \"small\",\n                onClick: clear\n              }, {\n                default: withCtx(() => [\n                  createTextVNode(toDisplayString(unref(t)(\"el.colorpicker.clear\")), 1)\n                ]),\n                _: 1\n              }, 8, [\"class\"]),\n              createVNode(unref(ElButton), {\n                plain: \"\",\n                size: \"small\",\n                class: normalizeClass(unref(ns).be(\"dropdown\", \"btn\")),\n                onClick: confirmValue\n              }, {\n                default: withCtx(() => [\n                  createTextVNode(toDisplayString(unref(t)(\"el.colorpicker.confirm\")), 1)\n                ]),\n                _: 1\n              }, 8, [\"class\"])\n            ], 2)\n          ])), [\n            [unref(ClickOutside), hide]\n          ])\n        ]),\n        default: withCtx(() => [\n          createElementVNode(\"div\", {\n            id: unref(buttonId),\n            class: normalizeClass(unref(btnKls)),\n            role: \"button\",\n            \"aria-label\": unref(buttonAriaLabel),\n            \"aria-labelledby\": unref(buttonAriaLabelledby),\n            \"aria-description\": unref(t)(\"el.colorpicker.description\", { color: _ctx.modelValue || \"\" }),\n            tabindex: _ctx.tabindex,\n            onKeydown: withKeys(handleTrigger, [\"enter\"])\n          }, [\n            unref(colorDisabled) ? (openBlock(), createElementBlock(\"div\", {\n              key: 0,\n              class: normalizeClass(unref(ns).be(\"picker\", \"mask\"))\n            }, null, 2)) : createCommentVNode(\"v-if\", true),\n            createElementVNode(\"div\", {\n              class: normalizeClass(unref(ns).be(\"picker\", \"trigger\")),\n              onClick: handleTrigger\n            }, [\n              createElementVNode(\"span\", {\n                class: normalizeClass([unref(ns).be(\"picker\", \"color\"), unref(ns).is(\"alpha\", _ctx.showAlpha)])\n              }, [\n                createElementVNode(\"span\", {\n                  class: normalizeClass(unref(ns).be(\"picker\", \"color-inner\")),\n                  style: normalizeStyle({\n                    backgroundColor: unref(displayedColor)\n                  })\n                }, [\n                  withDirectives(createVNode(unref(ElIcon), {\n                    class: normalizeClass([unref(ns).be(\"picker\", \"icon\"), unref(ns).is(\"icon-arrow-down\")])\n                  }, {\n                    default: withCtx(() => [\n                      createVNode(unref(ArrowDown))\n                    ]),\n                    _: 1\n                  }, 8, [\"class\"]), [\n                    [vShow, _ctx.modelValue || showPanelColor.value]\n                  ]),\n                  !_ctx.modelValue && !showPanelColor.value ? (openBlock(), createBlock(unref(ElIcon), {\n                    key: 0,\n                    class: normalizeClass([unref(ns).be(\"picker\", \"empty\"), unref(ns).is(\"icon-close\")])\n                  }, {\n                    default: withCtx(() => [\n                      createVNode(unref(Close))\n                    ]),\n                    _: 1\n                  }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)\n                ], 6)\n              ], 2)\n            ], 2)\n          ], 42, _hoisted_1)\n        ]),\n        _: 1\n      }, 8, [\"visible\", \"popper-class\", \"transition\"]);\n    };\n  }\n});\nvar ColorPicker = /* @__PURE__ */ _export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/color-picker/src/color-picker.vue\"]]);\n\nexport { ColorPicker as default };\n//# sourceMappingURL=color-picker2.mjs.map\n","start":1680879311747,"end":1680879312332}]}
