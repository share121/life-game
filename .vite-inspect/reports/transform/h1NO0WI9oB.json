{"resolvedId":"D:/360MoveData/Users/28546/Desktop/VSCode/ts/life/node_modules/.store/element-plus@2.3.2/node_modules/element-plus/es/components/popper/src/content2.mjs","transforms":[{"name":"vite:load-fallback","result":"import { defineComponent, inject, ref, provide, onMounted, watch, unref, onBeforeUnmount, openBlock, createElementBlock, mergeProps, createVNode, withCtx, renderSlot } from 'vue';\nimport { NOOP } from '@vue/shared';\nimport { isNil } from 'lodash-unified';\nimport '../../focus-trap/index.mjs';\nimport '../../form/index.mjs';\nimport '../../../utils/index.mjs';\nimport { POPPER_CONTENT_INJECTION_KEY } from './constants.mjs';\nimport { popperContentProps, popperContentEmits } from './content.mjs';\nimport './composables/index.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { usePopperContentFocusTrap } from './composables/use-focus-trap.mjs';\nimport { usePopperContent } from './composables/use-content.mjs';\nimport { usePopperContentDOM } from './composables/use-content-dom.mjs';\nimport { formItemContextKey } from '../../form/src/constants.mjs';\nimport { isElement } from '../../../utils/types.mjs';\nimport ElFocusTrap from '../../focus-trap/src/focus-trap.mjs';\n\nconst __default__ = defineComponent({\n  name: \"ElPopperContent\"\n});\nconst _sfc_main = /* @__PURE__ */ defineComponent({\n  ...__default__,\n  props: popperContentProps,\n  emits: popperContentEmits,\n  setup(__props, { expose, emit }) {\n    const props = __props;\n    const {\n      focusStartRef,\n      trapped,\n      onFocusAfterReleased,\n      onFocusAfterTrapped,\n      onFocusInTrap,\n      onFocusoutPrevented,\n      onReleaseRequested\n    } = usePopperContentFocusTrap(props, emit);\n    const { attributes, arrowRef, contentRef, styles, instanceRef, role, update } = usePopperContent(props);\n    const {\n      ariaModal,\n      arrowStyle,\n      contentAttrs,\n      contentClass,\n      contentStyle,\n      updateZIndex\n    } = usePopperContentDOM(props, {\n      styles,\n      attributes,\n      role\n    });\n    const formItemContext = inject(formItemContextKey, void 0);\n    const arrowOffset = ref();\n    provide(POPPER_CONTENT_INJECTION_KEY, {\n      arrowStyle,\n      arrowRef,\n      arrowOffset\n    });\n    if (formItemContext && (formItemContext.addInputId || formItemContext.removeInputId)) {\n      provide(formItemContextKey, {\n        ...formItemContext,\n        addInputId: NOOP,\n        removeInputId: NOOP\n      });\n    }\n    let triggerTargetAriaStopWatch = void 0;\n    const updatePopper = (shouldUpdateZIndex = true) => {\n      update();\n      shouldUpdateZIndex && updateZIndex();\n    };\n    const togglePopperAlive = () => {\n      updatePopper(false);\n      if (props.visible && props.focusOnShow) {\n        trapped.value = true;\n      } else if (props.visible === false) {\n        trapped.value = false;\n      }\n    };\n    onMounted(() => {\n      watch(() => props.triggerTargetEl, (triggerTargetEl, prevTriggerTargetEl) => {\n        triggerTargetAriaStopWatch == null ? void 0 : triggerTargetAriaStopWatch();\n        triggerTargetAriaStopWatch = void 0;\n        const el = unref(triggerTargetEl || contentRef.value);\n        const prevEl = unref(prevTriggerTargetEl || contentRef.value);\n        if (isElement(el)) {\n          triggerTargetAriaStopWatch = watch([role, () => props.ariaLabel, ariaModal, () => props.id], (watches) => {\n            ;\n            [\"role\", \"aria-label\", \"aria-modal\", \"id\"].forEach((key, idx) => {\n              isNil(watches[idx]) ? el.removeAttribute(key) : el.setAttribute(key, watches[idx]);\n            });\n          }, { immediate: true });\n        }\n        if (prevEl !== el && isElement(prevEl)) {\n          ;\n          [\"role\", \"aria-label\", \"aria-modal\", \"id\"].forEach((key) => {\n            prevEl.removeAttribute(key);\n          });\n        }\n      }, { immediate: true });\n      watch(() => props.visible, togglePopperAlive, { immediate: true });\n    });\n    onBeforeUnmount(() => {\n      triggerTargetAriaStopWatch == null ? void 0 : triggerTargetAriaStopWatch();\n      triggerTargetAriaStopWatch = void 0;\n    });\n    expose({\n      popperContentRef: contentRef,\n      popperInstanceRef: instanceRef,\n      updatePopper,\n      contentStyle\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", mergeProps({\n        ref_key: \"contentRef\",\n        ref: contentRef\n      }, unref(contentAttrs), {\n        style: unref(contentStyle),\n        class: unref(contentClass),\n        tabindex: \"-1\",\n        onMouseenter: _cache[0] || (_cache[0] = (e) => _ctx.$emit(\"mouseenter\", e)),\n        onMouseleave: _cache[1] || (_cache[1] = (e) => _ctx.$emit(\"mouseleave\", e))\n      }), [\n        createVNode(unref(ElFocusTrap), {\n          trapped: unref(trapped),\n          \"trap-on-focus-in\": true,\n          \"focus-trap-el\": unref(contentRef),\n          \"focus-start-el\": unref(focusStartRef),\n          onFocusAfterTrapped: unref(onFocusAfterTrapped),\n          onFocusAfterReleased: unref(onFocusAfterReleased),\n          onFocusin: unref(onFocusInTrap),\n          onFocusoutPrevented: unref(onFocusoutPrevented),\n          onReleaseRequested: unref(onReleaseRequested)\n        }, {\n          default: withCtx(() => [\n            renderSlot(_ctx.$slots, \"default\")\n          ]),\n          _: 3\n        }, 8, [\"trapped\", \"focus-trap-el\", \"focus-start-el\", \"onFocusAfterTrapped\", \"onFocusAfterReleased\", \"onFocusin\", \"onFocusoutPrevented\", \"onReleaseRequested\"])\n      ], 16);\n    };\n  }\n});\nvar ElPopperContent = /* @__PURE__ */ _export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/popper/src/content.vue\"]]);\n\nexport { ElPopperContent as default };\n//# sourceMappingURL=content2.mjs.map\n","start":1680879308054,"end":1680879308403}]}
