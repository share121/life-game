{"resolvedId":"D:/360MoveData/Users/28546/Desktop/VSCode/ts/life/node_modules/.store/element-plus@2.3.2/node_modules/element-plus/es/components/notification/src/notify.mjs","transforms":[{"name":"vite:load-fallback","result":"import { isVNode, createVNode, render } from 'vue';\nimport { isClient } from '@vueuse/core';\nimport '../../../utils/index.mjs';\nimport NotificationConstructor from './notification2.mjs';\nimport { notificationTypes } from './notification.mjs';\nimport { isElement } from '../../../utils/types.mjs';\nimport { isString } from '@vue/shared';\nimport { debugWarn } from '../../../utils/error.mjs';\n\nconst notifications = {\n  \"top-left\": [],\n  \"top-right\": [],\n  \"bottom-left\": [],\n  \"bottom-right\": []\n};\nconst GAP_SIZE = 16;\nlet seed = 1;\nconst notify = function(options = {}, context = null) {\n  if (!isClient)\n    return { close: () => void 0 };\n  if (typeof options === \"string\" || isVNode(options)) {\n    options = { message: options };\n  }\n  const position = options.position || \"top-right\";\n  let verticalOffset = options.offset || 0;\n  notifications[position].forEach(({ vm: vm2 }) => {\n    var _a;\n    verticalOffset += (((_a = vm2.el) == null ? void 0 : _a.offsetHeight) || 0) + GAP_SIZE;\n  });\n  verticalOffset += GAP_SIZE;\n  const id = `notification_${seed++}`;\n  const userOnClose = options.onClose;\n  const props = {\n    ...options,\n    offset: verticalOffset,\n    id,\n    onClose: () => {\n      close(id, position, userOnClose);\n    }\n  };\n  let appendTo = document.body;\n  if (isElement(options.appendTo)) {\n    appendTo = options.appendTo;\n  } else if (isString(options.appendTo)) {\n    appendTo = document.querySelector(options.appendTo);\n  }\n  if (!isElement(appendTo)) {\n    debugWarn(\"ElNotification\", \"the appendTo option is not an HTMLElement. Falling back to document.body.\");\n    appendTo = document.body;\n  }\n  const container = document.createElement(\"div\");\n  const vm = createVNode(NotificationConstructor, props, isVNode(props.message) ? {\n    default: () => props.message\n  } : null);\n  vm.appContext = context != null ? context : notify._context;\n  vm.props.onDestroy = () => {\n    render(null, container);\n  };\n  render(vm, container);\n  notifications[position].push({ vm });\n  appendTo.appendChild(container.firstElementChild);\n  return {\n    close: () => {\n      ;\n      vm.component.exposed.visible.value = false;\n    }\n  };\n};\nnotificationTypes.forEach((type) => {\n  notify[type] = (options = {}) => {\n    if (typeof options === \"string\" || isVNode(options)) {\n      options = {\n        message: options\n      };\n    }\n    return notify({\n      ...options,\n      type\n    });\n  };\n});\nfunction close(id, position, userOnClose) {\n  const orientedNotifications = notifications[position];\n  const idx = orientedNotifications.findIndex(({ vm: vm2 }) => {\n    var _a;\n    return ((_a = vm2.component) == null ? void 0 : _a.props.id) === id;\n  });\n  if (idx === -1)\n    return;\n  const { vm } = orientedNotifications[idx];\n  if (!vm)\n    return;\n  userOnClose == null ? void 0 : userOnClose(vm);\n  const removedHeight = vm.el.offsetHeight;\n  const verticalPos = position.split(\"-\")[0];\n  orientedNotifications.splice(idx, 1);\n  const len = orientedNotifications.length;\n  if (len < 1)\n    return;\n  for (let i = idx; i < len; i++) {\n    const { el, component } = orientedNotifications[i].vm;\n    const pos = Number.parseInt(el.style[verticalPos], 10) - removedHeight - GAP_SIZE;\n    component.props.offset = pos;\n  }\n}\nfunction closeAll() {\n  for (const orientedNotifications of Object.values(notifications)) {\n    orientedNotifications.forEach(({ vm }) => {\n      ;\n      vm.component.exposed.visible.value = false;\n    });\n  }\n}\nnotify.closeAll = closeAll;\nnotify._context = null;\n\nexport { close, closeAll, notify as default };\n//# sourceMappingURL=notify.mjs.map\n","start":1680879315175,"end":1680879315659}]}
