{"resolvedId":"D:/360MoveData/Users/28546/Desktop/VSCode/ts/life/node_modules/.store/element-plus@2.3.2/node_modules/element-plus/es/components/cascader/src/cascader2.mjs","transforms":[{"name":"vite:load-fallback","result":"import { defineComponent, useAttrs, ref, computed, nextTick, watch, onMounted, openBlock, createBlock, unref, withCtx, withDirectives, createElementBlock, normalizeClass, normalizeStyle, createVNode, withModifiers, Fragment, renderList, toDisplayString, createElementVNode, withKeys, vModelText, createCommentVNode, isRef, vShow, renderSlot } from 'vue';\nimport { isPromise } from '@vue/shared';\nimport { cloneDeep, debounce } from 'lodash-unified';\nimport { isClient, useCssVar, useResizeObserver } from '@vueuse/core';\nimport _CascaderPanel from '../../cascader-panel/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport { ElScrollbar } from '../../scrollbar/index.mjs';\nimport { ElTag } from '../../tag/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../form/index.mjs';\nimport '../../../directives/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport { CircleClose, ArrowDown, Check } from '@element-plus/icons-vue';\nimport { cascaderProps, cascaderEmits } from './cascader.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useFormItem } from '../../form/src/hooks/use-form-item.mjs';\nimport { useFormSize } from '../../form/src/hooks/use-form-common-props.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { isKorean } from '../../../utils/i18n.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport { focusNode, getSibling } from '../../../utils/dom/aria.mjs';\nimport ClickOutside from '../../../directives/click-outside/index.mjs';\n\nconst _hoisted_1 = { key: 0 };\nconst _hoisted_2 = [\"placeholder\", \"onKeydown\"];\nconst _hoisted_3 = [\"onClick\"];\nconst COMPONENT_NAME = \"ElCascader\";\nconst __default__ = defineComponent({\n  name: COMPONENT_NAME\n});\nconst _sfc_main = /* @__PURE__ */ defineComponent({\n  ...__default__,\n  props: cascaderProps,\n  emits: cascaderEmits,\n  setup(__props, { expose, emit }) {\n    const props = __props;\n    const popperOptions = {\n      modifiers: [\n        {\n          name: \"arrowPosition\",\n          enabled: true,\n          phase: \"main\",\n          fn: ({ state }) => {\n            const { modifiersData, placement } = state;\n            if ([\"right\", \"left\", \"bottom\", \"top\"].includes(placement))\n              return;\n            modifiersData.arrow.x = 35;\n          },\n          requires: [\"arrow\"]\n        }\n      ]\n    };\n    const attrs = useAttrs();\n    let inputInitialHeight = 0;\n    let pressDeleteCount = 0;\n    const nsCascader = useNamespace(\"cascader\");\n    const nsInput = useNamespace(\"input\");\n    const { t } = useLocale();\n    const { form, formItem } = useFormItem();\n    const tooltipRef = ref(null);\n    const input = ref(null);\n    const tagWrapper = ref(null);\n    const cascaderPanelRef = ref(null);\n    const suggestionPanel = ref(null);\n    const popperVisible = ref(false);\n    const inputHover = ref(false);\n    const filtering = ref(false);\n    const filterFocus = ref(false);\n    const inputValue = ref(\"\");\n    const searchInputValue = ref(\"\");\n    const presentTags = ref([]);\n    const allPresentTags = ref([]);\n    const suggestions = ref([]);\n    const isOnComposition = ref(false);\n    const cascaderStyle = computed(() => {\n      return attrs.style;\n    });\n    const isDisabled = computed(() => props.disabled || (form == null ? void 0 : form.disabled));\n    const inputPlaceholder = computed(() => props.placeholder || t(\"el.cascader.placeholder\"));\n    const currentPlaceholder = computed(() => searchInputValue.value || presentTags.value.length > 0 || isOnComposition.value ? \"\" : inputPlaceholder.value);\n    const realSize = useFormSize();\n    const tagSize = computed(() => [\"small\"].includes(realSize.value) ? \"small\" : \"default\");\n    const multiple = computed(() => !!props.props.multiple);\n    const readonly = computed(() => !props.filterable || multiple.value);\n    const searchKeyword = computed(() => multiple.value ? searchInputValue.value : inputValue.value);\n    const checkedNodes = computed(() => {\n      var _a;\n      return ((_a = cascaderPanelRef.value) == null ? void 0 : _a.checkedNodes) || [];\n    });\n    const clearBtnVisible = computed(() => {\n      if (!props.clearable || isDisabled.value || filtering.value || !inputHover.value)\n        return false;\n      return !!checkedNodes.value.length;\n    });\n    const presentText = computed(() => {\n      const { showAllLevels, separator } = props;\n      const nodes = checkedNodes.value;\n      return nodes.length ? multiple.value ? \"\" : nodes[0].calcText(showAllLevels, separator) : \"\";\n    });\n    const checkedValue = computed({\n      get() {\n        return cloneDeep(props.modelValue);\n      },\n      set(val) {\n        emit(UPDATE_MODEL_EVENT, val);\n        emit(CHANGE_EVENT, val);\n        if (props.validateEvent) {\n          formItem == null ? void 0 : formItem.validate(\"change\").catch((err) => debugWarn(err));\n        }\n      }\n    });\n    const cascaderKls = computed(() => {\n      return [\n        nsCascader.b(),\n        nsCascader.m(realSize.value),\n        nsCascader.is(\"disabled\", isDisabled.value),\n        attrs.class\n      ];\n    });\n    const cascaderIconKls = computed(() => {\n      return [\n        nsInput.e(\"icon\"),\n        \"icon-arrow-down\",\n        nsCascader.is(\"reverse\", popperVisible.value)\n      ];\n    });\n    const inputClass = computed(() => {\n      return nsCascader.is(\"focus\", popperVisible.value || filterFocus.value);\n    });\n    const contentRef = computed(() => {\n      var _a, _b;\n      return (_b = (_a = tooltipRef.value) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.contentRef;\n    });\n    const togglePopperVisible = (visible) => {\n      var _a, _b, _c;\n      if (isDisabled.value)\n        return;\n      visible = visible != null ? visible : !popperVisible.value;\n      if (visible !== popperVisible.value) {\n        popperVisible.value = visible;\n        (_b = (_a = input.value) == null ? void 0 : _a.input) == null ? void 0 : _b.setAttribute(\"aria-expanded\", `${visible}`);\n        if (visible) {\n          updatePopperPosition();\n          nextTick((_c = cascaderPanelRef.value) == null ? void 0 : _c.scrollToExpandingNode);\n        } else if (props.filterable) {\n          syncPresentTextValue();\n        }\n        emit(\"visibleChange\", visible);\n      }\n    };\n    const updatePopperPosition = () => {\n      nextTick(() => {\n        var _a;\n        (_a = tooltipRef.value) == null ? void 0 : _a.updatePopper();\n      });\n    };\n    const hideSuggestionPanel = () => {\n      filtering.value = false;\n    };\n    const genTag = (node) => {\n      const { showAllLevels, separator } = props;\n      return {\n        node,\n        key: node.uid,\n        text: node.calcText(showAllLevels, separator),\n        hitState: false,\n        closable: !isDisabled.value && !node.isDisabled,\n        isCollapseTag: false\n      };\n    };\n    const deleteTag = (tag) => {\n      var _a;\n      const node = tag.node;\n      node.doCheck(false);\n      (_a = cascaderPanelRef.value) == null ? void 0 : _a.calculateCheckedValue();\n      emit(\"removeTag\", node.valueByOption);\n    };\n    const calculatePresentTags = () => {\n      if (!multiple.value)\n        return;\n      const nodes = checkedNodes.value;\n      const tags = [];\n      const allTags = [];\n      nodes.forEach((node) => allTags.push(genTag(node)));\n      allPresentTags.value = allTags;\n      if (nodes.length) {\n        const [first, ...rest] = nodes;\n        const restCount = rest.length;\n        tags.push(genTag(first));\n        if (restCount) {\n          if (props.collapseTags) {\n            tags.push({\n              key: -1,\n              text: `+ ${restCount}`,\n              closable: false,\n              isCollapseTag: true\n            });\n          } else {\n            rest.forEach((node) => tags.push(genTag(node)));\n          }\n        }\n      }\n      presentTags.value = tags;\n    };\n    const calculateSuggestions = () => {\n      var _a, _b;\n      const { filterMethod, showAllLevels, separator } = props;\n      const res = (_b = (_a = cascaderPanelRef.value) == null ? void 0 : _a.getFlattedNodes(!props.props.checkStrictly)) == null ? void 0 : _b.filter((node) => {\n        if (node.isDisabled)\n          return false;\n        node.calcText(showAllLevels, separator);\n        return filterMethod(node, searchKeyword.value);\n      });\n      if (multiple.value) {\n        presentTags.value.forEach((tag) => {\n          tag.hitState = false;\n        });\n        allPresentTags.value.forEach((tag) => {\n          tag.hitState = false;\n        });\n      }\n      filtering.value = true;\n      suggestions.value = res;\n      updatePopperPosition();\n    };\n    const focusFirstNode = () => {\n      var _a;\n      let firstNode;\n      if (filtering.value && suggestionPanel.value) {\n        firstNode = suggestionPanel.value.$el.querySelector(`.${nsCascader.e(\"suggestion-item\")}`);\n      } else {\n        firstNode = (_a = cascaderPanelRef.value) == null ? void 0 : _a.$el.querySelector(`.${nsCascader.b(\"node\")}[tabindex=\"-1\"]`);\n      }\n      if (firstNode) {\n        firstNode.focus();\n        !filtering.value && firstNode.click();\n      }\n    };\n    const updateStyle = () => {\n      var _a, _b;\n      const inputInner = (_a = input.value) == null ? void 0 : _a.input;\n      const tagWrapperEl = tagWrapper.value;\n      const suggestionPanelEl = (_b = suggestionPanel.value) == null ? void 0 : _b.$el;\n      if (!isClient || !inputInner)\n        return;\n      if (suggestionPanelEl) {\n        const suggestionList = suggestionPanelEl.querySelector(`.${nsCascader.e(\"suggestion-list\")}`);\n        suggestionList.style.minWidth = `${inputInner.offsetWidth}px`;\n      }\n      if (tagWrapperEl) {\n        const { offsetHeight } = tagWrapperEl;\n        const height = presentTags.value.length > 0 ? `${Math.max(offsetHeight + 6, inputInitialHeight)}px` : `${inputInitialHeight}px`;\n        inputInner.style.height = height;\n        updatePopperPosition();\n      }\n    };\n    const getCheckedNodes = (leafOnly) => {\n      var _a;\n      return (_a = cascaderPanelRef.value) == null ? void 0 : _a.getCheckedNodes(leafOnly);\n    };\n    const handleExpandChange = (value) => {\n      updatePopperPosition();\n      emit(\"expandChange\", value);\n    };\n    const handleComposition = (event) => {\n      var _a;\n      const text = (_a = event.target) == null ? void 0 : _a.value;\n      if (event.type === \"compositionend\") {\n        isOnComposition.value = false;\n        nextTick(() => handleInput(text));\n      } else {\n        const lastCharacter = text[text.length - 1] || \"\";\n        isOnComposition.value = !isKorean(lastCharacter);\n      }\n    };\n    const handleKeyDown = (e) => {\n      if (isOnComposition.value)\n        return;\n      switch (e.code) {\n        case EVENT_CODE.enter:\n          togglePopperVisible();\n          break;\n        case EVENT_CODE.down:\n          togglePopperVisible(true);\n          nextTick(focusFirstNode);\n          e.preventDefault();\n          break;\n        case EVENT_CODE.esc:\n          if (popperVisible.value === true) {\n            e.preventDefault();\n            e.stopPropagation();\n            togglePopperVisible(false);\n          }\n          break;\n        case EVENT_CODE.tab:\n          togglePopperVisible(false);\n          break;\n      }\n    };\n    const handleClear = () => {\n      var _a;\n      (_a = cascaderPanelRef.value) == null ? void 0 : _a.clearCheckedNodes();\n      if (!popperVisible.value && props.filterable) {\n        syncPresentTextValue();\n      }\n      togglePopperVisible(false);\n    };\n    const syncPresentTextValue = () => {\n      const { value } = presentText;\n      inputValue.value = value;\n      searchInputValue.value = value;\n    };\n    const handleSuggestionClick = (node) => {\n      var _a, _b;\n      const { checked } = node;\n      if (multiple.value) {\n        (_a = cascaderPanelRef.value) == null ? void 0 : _a.handleCheckChange(node, !checked, false);\n      } else {\n        !checked && ((_b = cascaderPanelRef.value) == null ? void 0 : _b.handleCheckChange(node, true, false));\n        togglePopperVisible(false);\n      }\n    };\n    const handleSuggestionKeyDown = (e) => {\n      const target = e.target;\n      const { code } = e;\n      switch (code) {\n        case EVENT_CODE.up:\n        case EVENT_CODE.down: {\n          const distance = code === EVENT_CODE.up ? -1 : 1;\n          focusNode(getSibling(target, distance, `.${nsCascader.e(\"suggestion-item\")}[tabindex=\"-1\"]`));\n          break;\n        }\n        case EVENT_CODE.enter:\n          target.click();\n          break;\n      }\n    };\n    const handleDelete = () => {\n      const tags = presentTags.value;\n      const lastTag = tags[tags.length - 1];\n      pressDeleteCount = searchInputValue.value ? 0 : pressDeleteCount + 1;\n      if (!lastTag || !pressDeleteCount || props.collapseTags && tags.length > 1)\n        return;\n      if (lastTag.hitState) {\n        deleteTag(lastTag);\n      } else {\n        lastTag.hitState = true;\n      }\n    };\n    const handleFocus = (e) => {\n      const el = e.target;\n      const name = nsCascader.e(\"search-input\");\n      if (el.className === name) {\n        filterFocus.value = true;\n      }\n      emit(\"focus\", e);\n    };\n    const handleBlur = (e) => {\n      filterFocus.value = false;\n      emit(\"blur\", e);\n    };\n    const handleFilter = debounce(() => {\n      const { value } = searchKeyword;\n      if (!value)\n        return;\n      const passed = props.beforeFilter(value);\n      if (isPromise(passed)) {\n        passed.then(calculateSuggestions).catch(() => {\n        });\n      } else if (passed !== false) {\n        calculateSuggestions();\n      } else {\n        hideSuggestionPanel();\n      }\n    }, props.debounce);\n    const handleInput = (val, e) => {\n      !popperVisible.value && togglePopperVisible(true);\n      if (e == null ? void 0 : e.isComposing)\n        return;\n      val ? handleFilter() : hideSuggestionPanel();\n    };\n    watch(filtering, updatePopperPosition);\n    watch([checkedNodes, isDisabled], calculatePresentTags);\n    watch(presentTags, () => {\n      nextTick(() => updateStyle());\n    });\n    watch(presentText, syncPresentTextValue, { immediate: true });\n    onMounted(() => {\n      const inputInner = input.value.input;\n      const inputInnerHeight = Number.parseFloat(useCssVar(nsInput.cssVarName(\"input-height\"), inputInner).value) - 2;\n      inputInitialHeight = inputInner.offsetHeight || inputInnerHeight;\n      useResizeObserver(inputInner, updateStyle);\n    });\n    expose({\n      getCheckedNodes,\n      cascaderPanelRef,\n      togglePopperVisible,\n      contentRef\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(unref(ElTooltip), {\n        ref_key: \"tooltipRef\",\n        ref: tooltipRef,\n        visible: popperVisible.value,\n        teleported: _ctx.teleported,\n        \"popper-class\": [unref(nsCascader).e(\"dropdown\"), _ctx.popperClass],\n        \"popper-options\": popperOptions,\n        \"fallback-placements\": [\n          \"bottom-start\",\n          \"bottom\",\n          \"top-start\",\n          \"top\",\n          \"right\",\n          \"left\"\n        ],\n        \"stop-popper-mouse-event\": false,\n        \"gpu-acceleration\": false,\n        placement: \"bottom-start\",\n        transition: `${unref(nsCascader).namespace.value}-zoom-in-top`,\n        effect: \"light\",\n        pure: \"\",\n        persistent: \"\",\n        onHide: hideSuggestionPanel\n      }, {\n        default: withCtx(() => [\n          withDirectives((openBlock(), createElementBlock(\"div\", {\n            class: normalizeClass(unref(cascaderKls)),\n            style: normalizeStyle(unref(cascaderStyle)),\n            onClick: _cache[5] || (_cache[5] = () => togglePopperVisible(unref(readonly) ? void 0 : true)),\n            onKeydown: handleKeyDown,\n            onMouseenter: _cache[6] || (_cache[6] = ($event) => inputHover.value = true),\n            onMouseleave: _cache[7] || (_cache[7] = ($event) => inputHover.value = false)\n          }, [\n            createVNode(unref(ElInput), {\n              ref_key: \"input\",\n              ref: input,\n              modelValue: inputValue.value,\n              \"onUpdate:modelValue\": _cache[1] || (_cache[1] = ($event) => inputValue.value = $event),\n              placeholder: unref(currentPlaceholder),\n              readonly: unref(readonly),\n              disabled: unref(isDisabled),\n              \"validate-event\": false,\n              size: unref(realSize),\n              class: normalizeClass(unref(inputClass)),\n              tabindex: unref(multiple) && _ctx.filterable && !unref(isDisabled) ? -1 : void 0,\n              onCompositionstart: handleComposition,\n              onCompositionupdate: handleComposition,\n              onCompositionend: handleComposition,\n              onFocus: handleFocus,\n              onBlur: handleBlur,\n              onInput: handleInput\n            }, {\n              suffix: withCtx(() => [\n                unref(clearBtnVisible) ? (openBlock(), createBlock(unref(ElIcon), {\n                  key: \"clear\",\n                  class: normalizeClass([unref(nsInput).e(\"icon\"), \"icon-circle-close\"]),\n                  onClick: withModifiers(handleClear, [\"stop\"])\n                }, {\n                  default: withCtx(() => [\n                    createVNode(unref(CircleClose))\n                  ]),\n                  _: 1\n                }, 8, [\"class\", \"onClick\"])) : (openBlock(), createBlock(unref(ElIcon), {\n                  key: \"arrow-down\",\n                  class: normalizeClass(unref(cascaderIconKls)),\n                  onClick: _cache[0] || (_cache[0] = withModifiers(($event) => togglePopperVisible(), [\"stop\"]))\n                }, {\n                  default: withCtx(() => [\n                    createVNode(unref(ArrowDown))\n                  ]),\n                  _: 1\n                }, 8, [\"class\"]))\n              ]),\n              _: 1\n            }, 8, [\"modelValue\", \"placeholder\", \"readonly\", \"disabled\", \"size\", \"class\", \"tabindex\"]),\n            unref(multiple) ? (openBlock(), createElementBlock(\"div\", {\n              key: 0,\n              ref_key: \"tagWrapper\",\n              ref: tagWrapper,\n              class: normalizeClass(unref(nsCascader).e(\"tags\"))\n            }, [\n              (openBlock(true), createElementBlock(Fragment, null, renderList(presentTags.value, (tag) => {\n                return openBlock(), createBlock(unref(ElTag), {\n                  key: tag.key,\n                  type: _ctx.tagType,\n                  size: unref(tagSize),\n                  hit: tag.hitState,\n                  closable: tag.closable,\n                  \"disable-transitions\": \"\",\n                  onClose: ($event) => deleteTag(tag)\n                }, {\n                  default: withCtx(() => [\n                    tag.isCollapseTag === false ? (openBlock(), createElementBlock(\"span\", _hoisted_1, toDisplayString(tag.text), 1)) : (openBlock(), createBlock(unref(ElTooltip), {\n                      key: 1,\n                      disabled: popperVisible.value || !_ctx.collapseTagsTooltip,\n                      \"fallback-placements\": [\"bottom\", \"top\", \"right\", \"left\"],\n                      placement: \"bottom\",\n                      effect: \"light\"\n                    }, {\n                      default: withCtx(() => [\n                        createElementVNode(\"span\", null, toDisplayString(tag.text), 1)\n                      ]),\n                      content: withCtx(() => [\n                        createElementVNode(\"div\", {\n                          class: normalizeClass(unref(nsCascader).e(\"collapse-tags\"))\n                        }, [\n                          (openBlock(true), createElementBlock(Fragment, null, renderList(allPresentTags.value.slice(1), (tag2, idx) => {\n                            return openBlock(), createElementBlock(\"div\", {\n                              key: idx,\n                              class: normalizeClass(unref(nsCascader).e(\"collapse-tag\"))\n                            }, [\n                              (openBlock(), createBlock(unref(ElTag), {\n                                key: tag2.key,\n                                class: \"in-tooltip\",\n                                type: _ctx.tagType,\n                                size: unref(tagSize),\n                                hit: tag2.hitState,\n                                closable: tag2.closable,\n                                \"disable-transitions\": \"\",\n                                onClose: ($event) => deleteTag(tag2)\n                              }, {\n                                default: withCtx(() => [\n                                  createElementVNode(\"span\", null, toDisplayString(tag2.text), 1)\n                                ]),\n                                _: 2\n                              }, 1032, [\"type\", \"size\", \"hit\", \"closable\", \"onClose\"]))\n                            ], 2);\n                          }), 128))\n                        ], 2)\n                      ]),\n                      _: 2\n                    }, 1032, [\"disabled\"]))\n                  ]),\n                  _: 2\n                }, 1032, [\"type\", \"size\", \"hit\", \"closable\", \"onClose\"]);\n              }), 128)),\n              _ctx.filterable && !unref(isDisabled) ? withDirectives((openBlock(), createElementBlock(\"input\", {\n                key: 0,\n                \"onUpdate:modelValue\": _cache[2] || (_cache[2] = ($event) => searchInputValue.value = $event),\n                type: \"text\",\n                class: normalizeClass(unref(nsCascader).e(\"search-input\")),\n                placeholder: unref(presentText) ? \"\" : unref(inputPlaceholder),\n                onInput: _cache[3] || (_cache[3] = (e) => handleInput(searchInputValue.value, e)),\n                onClick: _cache[4] || (_cache[4] = withModifiers(($event) => togglePopperVisible(true), [\"stop\"])),\n                onKeydown: withKeys(handleDelete, [\"delete\"]),\n                onCompositionstart: handleComposition,\n                onCompositionupdate: handleComposition,\n                onCompositionend: handleComposition,\n                onFocus: handleFocus,\n                onBlur: handleBlur\n              }, null, 42, _hoisted_2)), [\n                [vModelText, searchInputValue.value]\n              ]) : createCommentVNode(\"v-if\", true)\n            ], 2)) : createCommentVNode(\"v-if\", true)\n          ], 38)), [\n            [unref(ClickOutside), () => togglePopperVisible(false), unref(contentRef)]\n          ])\n        ]),\n        content: withCtx(() => [\n          withDirectives(createVNode(unref(_CascaderPanel), {\n            ref_key: \"cascaderPanelRef\",\n            ref: cascaderPanelRef,\n            modelValue: unref(checkedValue),\n            \"onUpdate:modelValue\": _cache[8] || (_cache[8] = ($event) => isRef(checkedValue) ? checkedValue.value = $event : null),\n            options: _ctx.options,\n            props: props.props,\n            border: false,\n            \"render-label\": _ctx.$slots.default,\n            onExpandChange: handleExpandChange,\n            onClose: _cache[9] || (_cache[9] = ($event) => _ctx.$nextTick(() => togglePopperVisible(false)))\n          }, null, 8, [\"modelValue\", \"options\", \"props\", \"render-label\"]), [\n            [vShow, !filtering.value]\n          ]),\n          _ctx.filterable ? withDirectives((openBlock(), createBlock(unref(ElScrollbar), {\n            key: 0,\n            ref_key: \"suggestionPanel\",\n            ref: suggestionPanel,\n            tag: \"ul\",\n            class: normalizeClass(unref(nsCascader).e(\"suggestion-panel\")),\n            \"view-class\": unref(nsCascader).e(\"suggestion-list\"),\n            onKeydown: handleSuggestionKeyDown\n          }, {\n            default: withCtx(() => [\n              suggestions.value.length ? (openBlock(true), createElementBlock(Fragment, { key: 0 }, renderList(suggestions.value, (item) => {\n                return openBlock(), createElementBlock(\"li\", {\n                  key: item.uid,\n                  class: normalizeClass([\n                    unref(nsCascader).e(\"suggestion-item\"),\n                    unref(nsCascader).is(\"checked\", item.checked)\n                  ]),\n                  tabindex: -1,\n                  onClick: ($event) => handleSuggestionClick(item)\n                }, [\n                  createElementVNode(\"span\", null, toDisplayString(item.text), 1),\n                  item.checked ? (openBlock(), createBlock(unref(ElIcon), { key: 0 }, {\n                    default: withCtx(() => [\n                      createVNode(unref(Check))\n                    ]),\n                    _: 1\n                  })) : createCommentVNode(\"v-if\", true)\n                ], 10, _hoisted_3);\n              }), 128)) : renderSlot(_ctx.$slots, \"empty\", { key: 1 }, () => [\n                createElementVNode(\"li\", {\n                  class: normalizeClass(unref(nsCascader).e(\"empty-text\"))\n                }, toDisplayString(unref(t)(\"el.cascader.noMatch\")), 3)\n              ])\n            ]),\n            _: 3\n          }, 8, [\"class\", \"view-class\"])), [\n            [vShow, filtering.value]\n          ]) : createCommentVNode(\"v-if\", true)\n        ]),\n        _: 3\n      }, 8, [\"visible\", \"teleported\", \"popper-class\", \"transition\"]);\n    };\n  }\n});\nvar Cascader = /* @__PURE__ */ _export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/cascader/src/cascader.vue\"]]);\n\nexport { Cascader as default };\n//# sourceMappingURL=cascader2.mjs.map\n","start":1680878569905,"end":1680878570383}]}
