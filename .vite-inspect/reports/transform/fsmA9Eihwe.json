{"resolvedId":"D:/360MoveData/Users/28546/Desktop/VSCode/ts/life/node_modules/.store/element-plus@2.3.2/node_modules/element-plus/es/components/checkbox/src/checkbox2.mjs","transforms":[{"name":"vite:load-fallback","result":"import { defineComponent, useSlots, computed, openBlock, createBlock, resolveDynamicComponent, unref, normalizeClass, withCtx, createElementVNode, withDirectives, createElementBlock, isRef, vModelCheckbox, renderSlot, Fragment, createTextVNode, toDisplayString, createCommentVNode } from 'vue';\nimport '../../../hooks/index.mjs';\nimport { checkboxProps, checkboxEmits } from './checkbox.mjs';\nimport './composables/index.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useCheckbox } from './composables/use-checkbox.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\n\nconst _hoisted_1 = [\"tabindex\", \"role\", \"aria-checked\"];\nconst _hoisted_2 = [\"id\", \"aria-hidden\", \"name\", \"tabindex\", \"disabled\", \"true-value\", \"false-value\"];\nconst _hoisted_3 = [\"id\", \"aria-hidden\", \"disabled\", \"value\", \"name\", \"tabindex\"];\nconst __default__ = defineComponent({\n  name: \"ElCheckbox\"\n});\nconst _sfc_main = /* @__PURE__ */ defineComponent({\n  ...__default__,\n  props: checkboxProps,\n  emits: checkboxEmits,\n  setup(__props) {\n    const props = __props;\n    const slots = useSlots();\n    const {\n      inputId,\n      isLabeledByFormItem,\n      isChecked,\n      isDisabled,\n      isFocused,\n      checkboxSize,\n      hasOwnLabel,\n      model,\n      handleChange,\n      onClickRoot\n    } = useCheckbox(props, slots);\n    const ns = useNamespace(\"checkbox\");\n    const compKls = computed(() => {\n      return [\n        ns.b(),\n        ns.m(checkboxSize.value),\n        ns.is(\"disabled\", isDisabled.value),\n        ns.is(\"bordered\", props.border),\n        ns.is(\"checked\", isChecked.value)\n      ];\n    });\n    const spanKls = computed(() => {\n      return [\n        ns.e(\"input\"),\n        ns.is(\"disabled\", isDisabled.value),\n        ns.is(\"checked\", isChecked.value),\n        ns.is(\"indeterminate\", props.indeterminate),\n        ns.is(\"focus\", isFocused.value)\n      ];\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(resolveDynamicComponent(!unref(hasOwnLabel) && unref(isLabeledByFormItem) ? \"span\" : \"label\"), {\n        class: normalizeClass(unref(compKls)),\n        \"aria-controls\": _ctx.indeterminate ? _ctx.controls : null,\n        onClick: unref(onClickRoot)\n      }, {\n        default: withCtx(() => [\n          createElementVNode(\"span\", {\n            class: normalizeClass(unref(spanKls)),\n            tabindex: _ctx.indeterminate ? 0 : void 0,\n            role: _ctx.indeterminate ? \"checkbox\" : void 0,\n            \"aria-checked\": _ctx.indeterminate ? \"mixed\" : void 0\n          }, [\n            _ctx.trueLabel || _ctx.falseLabel ? withDirectives((openBlock(), createElementBlock(\"input\", {\n              key: 0,\n              id: unref(inputId),\n              \"onUpdate:modelValue\": _cache[0] || (_cache[0] = ($event) => isRef(model) ? model.value = $event : null),\n              class: normalizeClass(unref(ns).e(\"original\")),\n              type: \"checkbox\",\n              \"aria-hidden\": _ctx.indeterminate ? \"true\" : \"false\",\n              name: _ctx.name,\n              tabindex: _ctx.tabindex,\n              disabled: unref(isDisabled),\n              \"true-value\": _ctx.trueLabel,\n              \"false-value\": _ctx.falseLabel,\n              onChange: _cache[1] || (_cache[1] = (...args) => unref(handleChange) && unref(handleChange)(...args)),\n              onFocus: _cache[2] || (_cache[2] = ($event) => isFocused.value = true),\n              onBlur: _cache[3] || (_cache[3] = ($event) => isFocused.value = false)\n            }, null, 42, _hoisted_2)), [\n              [vModelCheckbox, unref(model)]\n            ]) : withDirectives((openBlock(), createElementBlock(\"input\", {\n              key: 1,\n              id: unref(inputId),\n              \"onUpdate:modelValue\": _cache[4] || (_cache[4] = ($event) => isRef(model) ? model.value = $event : null),\n              class: normalizeClass(unref(ns).e(\"original\")),\n              type: \"checkbox\",\n              \"aria-hidden\": _ctx.indeterminate ? \"true\" : \"false\",\n              disabled: unref(isDisabled),\n              value: _ctx.label,\n              name: _ctx.name,\n              tabindex: _ctx.tabindex,\n              onChange: _cache[5] || (_cache[5] = (...args) => unref(handleChange) && unref(handleChange)(...args)),\n              onFocus: _cache[6] || (_cache[6] = ($event) => isFocused.value = true),\n              onBlur: _cache[7] || (_cache[7] = ($event) => isFocused.value = false)\n            }, null, 42, _hoisted_3)), [\n              [vModelCheckbox, unref(model)]\n            ]),\n            createElementVNode(\"span\", {\n              class: normalizeClass(unref(ns).e(\"inner\"))\n            }, null, 2)\n          ], 10, _hoisted_1),\n          unref(hasOwnLabel) ? (openBlock(), createElementBlock(\"span\", {\n            key: 0,\n            class: normalizeClass(unref(ns).e(\"label\"))\n          }, [\n            renderSlot(_ctx.$slots, \"default\"),\n            !_ctx.$slots.default ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [\n              createTextVNode(toDisplayString(_ctx.label), 1)\n            ], 64)) : createCommentVNode(\"v-if\", true)\n          ], 2)) : createCommentVNode(\"v-if\", true)\n        ]),\n        _: 3\n      }, 8, [\"class\", \"aria-controls\", \"onClick\"]);\n    };\n  }\n});\nvar Checkbox = /* @__PURE__ */ _export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/checkbox/src/checkbox.vue\"]]);\n\nexport { Checkbox as default };\n//# sourceMappingURL=checkbox2.mjs.map\n","start":1680880651406,"end":1680880651953}]}
