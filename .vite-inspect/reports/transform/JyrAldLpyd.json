{"resolvedId":"D:/360MoveData/Users/28546/Desktop/VSCode/ts/life/node_modules/.store/element-plus@2.3.2/node_modules/element-plus/es/components/table-v2/src/composables/use-columns.mjs","transforms":[{"name":"vite:load-fallback","result":"import { computed, unref } from 'vue';\nimport '../../../../utils/index.mjs';\nimport { SortOrder, oppositeOrderMap } from '../constants.mjs';\nimport { placeholderSign } from '../private.mjs';\nimport { calcColumnStyle } from './utils.mjs';\nimport { isObject } from '@vue/shared';\n\nfunction useColumns(props, columns, fixed) {\n  const visibleColumns = computed(() => {\n    return unref(columns).filter((column) => !column.hidden);\n  });\n  const fixedColumnsOnLeft = computed(() => unref(visibleColumns).filter((column) => column.fixed === \"left\" || column.fixed === true));\n  const fixedColumnsOnRight = computed(() => unref(visibleColumns).filter((column) => column.fixed === \"right\"));\n  const normalColumns = computed(() => unref(visibleColumns).filter((column) => !column.fixed));\n  const mainColumns = computed(() => {\n    const ret = [];\n    unref(fixedColumnsOnLeft).forEach((column) => {\n      ret.push({\n        ...column,\n        placeholderSign\n      });\n    });\n    unref(normalColumns).forEach((column) => {\n      ret.push(column);\n    });\n    unref(fixedColumnsOnRight).forEach((column) => {\n      ret.push({\n        ...column,\n        placeholderSign\n      });\n    });\n    return ret;\n  });\n  const hasFixedColumns = computed(() => {\n    return unref(fixedColumnsOnLeft).length || unref(fixedColumnsOnRight).length;\n  });\n  const columnsStyles = computed(() => {\n    const _columns = unref(columns);\n    return _columns.reduce((style, column) => {\n      style[column.key] = calcColumnStyle(column, unref(fixed), props.fixed);\n      return style;\n    }, {});\n  });\n  const columnsTotalWidth = computed(() => {\n    return unref(visibleColumns).reduce((width, column) => width + column.width, 0);\n  });\n  const getColumn = (key) => {\n    return unref(columns).find((column) => column.key === key);\n  };\n  const getColumnStyle = (key) => {\n    return unref(columnsStyles)[key];\n  };\n  const updateColumnWidth = (column, width) => {\n    column.width = width;\n  };\n  function onColumnSorted(e) {\n    var _a;\n    const { key } = e.currentTarget.dataset;\n    if (!key)\n      return;\n    const { sortState, sortBy } = props;\n    let order = SortOrder.ASC;\n    if (isObject(sortState)) {\n      order = oppositeOrderMap[sortState[key]];\n    } else {\n      order = oppositeOrderMap[sortBy.order];\n    }\n    (_a = props.onColumnSort) == null ? void 0 : _a.call(props, { column: getColumn(key), key, order });\n  }\n  return {\n    columns,\n    columnsStyles,\n    columnsTotalWidth,\n    fixedColumnsOnLeft,\n    fixedColumnsOnRight,\n    hasFixedColumns,\n    mainColumns,\n    normalColumns,\n    visibleColumns,\n    getColumn,\n    getColumnStyle,\n    updateColumnWidth,\n    onColumnSorted\n  };\n}\n\nexport { useColumns };\n//# sourceMappingURL=use-columns.mjs.map\n","start":1680879317726,"end":1680879317943}]}
