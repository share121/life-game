{"resolvedId":"D:/360MoveData/Users/28546/Desktop/VSCode/ts/life/node_modules/.store/element-plus@2.3.2/node_modules/element-plus/es/components/tooltip-v2/src/content2.mjs","transforms":[{"name":"vite:load-fallback","result":"import { defineComponent, inject, ref, computed, unref, watch, onMounted, provide, openBlock, createElementBlock, normalizeStyle, normalizeClass, renderSlot, createVNode, withCtx, Fragment, createTextVNode, toDisplayString, createCommentVNode } from 'vue';\nimport { offset } from '@floating-ui/dom';\nimport '../../../hooks/index.mjs';\nimport '../../visual-hidden/index.mjs';\nimport { tooltipV2RootKey, tooltipV2ContentKey } from './constants.mjs';\nimport { tooltipV2ContentProps } from './content.mjs';\nimport { tooltipV2CommonProps } from './common.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useFloating, arrowMiddleware } from '../../../hooks/use-floating/index.mjs';\nimport { useZIndex } from '../../../hooks/use-z-index/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport ElVisuallyHidden from '../../visual-hidden/src/visual-hidden2.mjs';\n\nconst _hoisted_1 = [\"data-side\"];\nconst __default__ = defineComponent({\n  name: \"ElTooltipV2Content\"\n});\nconst _sfc_main = /* @__PURE__ */ defineComponent({\n  ...__default__,\n  props: { ...tooltipV2ContentProps, ...tooltipV2CommonProps },\n  setup(__props) {\n    const props = __props;\n    const { triggerRef, contentId } = inject(tooltipV2RootKey);\n    const placement = ref(props.placement);\n    const strategy = ref(props.strategy);\n    const arrowRef = ref(null);\n    const { referenceRef, contentRef, middlewareData, x, y, update } = useFloating({\n      placement,\n      strategy,\n      middleware: computed(() => {\n        const middleware = [offset(props.offset)];\n        if (props.showArrow) {\n          middleware.push(arrowMiddleware({\n            arrowRef\n          }));\n        }\n        return middleware;\n      })\n    });\n    const zIndex = useZIndex().nextZIndex();\n    const ns = useNamespace(\"tooltip-v2\");\n    const side = computed(() => {\n      return placement.value.split(\"-\")[0];\n    });\n    const contentStyle = computed(() => {\n      return {\n        position: unref(strategy),\n        top: `${unref(y) || 0}px`,\n        left: `${unref(x) || 0}px`,\n        zIndex\n      };\n    });\n    const arrowStyle = computed(() => {\n      if (!props.showArrow)\n        return {};\n      const { arrow } = unref(middlewareData);\n      return {\n        [`--${ns.namespace.value}-tooltip-v2-arrow-x`]: `${arrow == null ? void 0 : arrow.x}px` || \"\",\n        [`--${ns.namespace.value}-tooltip-v2-arrow-y`]: `${arrow == null ? void 0 : arrow.y}px` || \"\"\n      };\n    });\n    const contentClass = computed(() => [\n      ns.e(\"content\"),\n      ns.is(\"dark\", props.effect === \"dark\"),\n      ns.is(unref(strategy)),\n      props.contentClass\n    ]);\n    watch(arrowRef, () => update());\n    watch(() => props.placement, (val) => placement.value = val);\n    onMounted(() => {\n      watch(() => props.reference || triggerRef.value, (el) => {\n        referenceRef.value = el || void 0;\n      }, {\n        immediate: true\n      });\n    });\n    provide(tooltipV2ContentKey, { arrowRef });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        ref_key: \"contentRef\",\n        ref: contentRef,\n        style: normalizeStyle(unref(contentStyle)),\n        \"data-tooltip-v2-root\": \"\"\n      }, [\n        !_ctx.nowrap ? (openBlock(), createElementBlock(\"div\", {\n          key: 0,\n          \"data-side\": unref(side),\n          class: normalizeClass(unref(contentClass))\n        }, [\n          renderSlot(_ctx.$slots, \"default\", {\n            contentStyle: unref(contentStyle),\n            contentClass: unref(contentClass)\n          }),\n          createVNode(unref(ElVisuallyHidden), {\n            id: unref(contentId),\n            role: \"tooltip\"\n          }, {\n            default: withCtx(() => [\n              _ctx.ariaLabel ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [\n                createTextVNode(toDisplayString(_ctx.ariaLabel), 1)\n              ], 64)) : renderSlot(_ctx.$slots, \"default\", { key: 1 })\n            ]),\n            _: 3\n          }, 8, [\"id\"]),\n          renderSlot(_ctx.$slots, \"arrow\", {\n            style: normalizeStyle(unref(arrowStyle)),\n            side: unref(side)\n          })\n        ], 10, _hoisted_1)) : createCommentVNode(\"v-if\", true)\n      ], 4);\n    };\n  }\n});\nvar TooltipV2Content = /* @__PURE__ */ _export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/tooltip-v2/src/content.vue\"]]);\n\nexport { TooltipV2Content as default };\n//# sourceMappingURL=content2.mjs.map\n","start":1680880661355,"end":1680880661526}]}
